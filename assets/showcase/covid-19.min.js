!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=7)}({7:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)<0?r=a+1:i=a}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)>0?i=a:r=a+1}return r}}};var a=i(r),o=a.right,u=(a.left,o);var s=Array.prototype,c=(s.slice,s.map,Math.sqrt(50)),h=Math.sqrt(10),f=Math.sqrt(2),l=function(t,n,e){var r,i,a,o,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(o=_(t,n,e))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),n=Math.floor(n/o),a=new Array(i=Math.ceil(n-t+1));++u<i;)a[u]=(t+u)*o;else for(t=Math.floor(t*o),n=Math.ceil(n*o),a=new Array(i=Math.ceil(t-n+1));++u<i;)a[u]=(t-u)/o;return r&&a.reverse(),a};function _(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=c?10:a>=h?5:a>=f?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=c?10:a>=h?5:a>=f?2:1)}function d(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=c?i*=10:a>=h?i*=5:a>=f&&(i*=2),n<t?-i:i}var p=function(t){for(var n,e,r,i=t.length,a=-1,o=0;++a<i;)o+=t[a].length;for(e=new Array(o);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--o]=r[n];return e};var v=Array.prototype.slice,y=function(t){return t};function g(t){return"translate("+(t+.5)+",0)"}function b(t){return"translate(0,"+(t+.5)+")"}function x(t){return function(n){return+t(n)}}function m(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function w(){return!this.__axis}function M(t,n){var e=[],r=null,i=null,a=6,o=6,u=3,s=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",h=1===t||3===t?g:b;function f(f){var l=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,_=null==i?n.tickFormat?n.tickFormat.apply(n,e):y:i,d=Math.max(a,0)+u,p=n.range(),v=+p[0]+.5,g=+p[p.length-1]+.5,b=(n.bandwidth?m:x)(n.copy()),M=f.selection?f.selection():f,k=M.selectAll(".domain").data([null]),T=M.selectAll(".tick").data(l,n).order(),N=T.exit(),C=T.enter().append("g").attr("class","tick"),S=T.select("line"),A=T.select("text");k=k.merge(k.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),T=T.merge(C),S=S.merge(C.append("line").attr("stroke","#000").attr(c+"2",s*a)),A=A.merge(C.append("text").attr("fill","#000").attr(c,s*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==M&&(k=k.transition(f),T=T.transition(f),S=S.transition(f),A=A.transition(f),N=N.transition(f).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=b(t))?h(t):this.getAttribute("transform")})),C.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return h(n&&isFinite(n=n(t))?n:b(t))}))),N.remove(),k.attr("d",4===t||2==t?"M"+s*o+","+v+"H0.5V"+g+"H"+s*o:"M"+v+","+s*o+"V0.5H"+g+"V"+s*o),T.attr("opacity",1).attr("transform",(function(t){return h(b(t))})),S.attr(c+"2",s*a),A.attr(c,s*d).text(_),M.filter(w).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),M.each((function(){this.__axis=b}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=v.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:v.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:v.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(a=o=+t,f):a},f.tickSizeInner=function(t){return arguments.length?(a=+t,f):a},f.tickSizeOuter=function(t){return arguments.length?(o=+t,f):o},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f}var k={value:function(){}};function T(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new N(r)}function N(t){this._=t}function C(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function S(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function A(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=k,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}N.prototype=T.prototype={constructor:N,on:function(t,n){var e,r=this._,i=C(t+"",r),a=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<o;)if(e=(t=i[a]).type)r[e]=A(r[e],t.name,n);else if(null==n)for(e in r)r[e]=A(r[e],t.name,null);return this}for(;++a<o;)if((e=(t=i[a]).type)&&(e=S(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new N(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),a=0;a<e;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(r=this._[t]).length;a<e;++a)r[a].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(n,e)}};var E=T,D="http://www.w3.org/1999/xhtml",U={svg:"http://www.w3.org/2000/svg",xhtml:D,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},P=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),U.hasOwnProperty(n)?{space:U[n],local:t}:t};function L(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===D&&n.documentElement.namespaceURI===D?n.createElement(t):n.createElementNS(e,t)}}function R(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var F=function(t){var n=P(t);return(n.local?R:L)(n)},z=0;function Y(){this._="@"+(++z).toString(36)}Y.prototype=function(){return new Y}.prototype={constructor:Y,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var j=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var q=document.documentElement;if(!q.matches){var H=q.webkitMatchesSelector||q.msMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector;j=function(t){return function(){return H.call(this,t)}}}}var O=j,X={},$=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(X={mouseenter:"mouseover",mouseleave:"mouseout"}));function I(t,n,e){return t=V(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function V(t,n,e){return function(r){var i=$;$=r;try{t.call(this,this.__data__,n,e)}finally{$=i}}}function B(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Z(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,a=n.length;r<a;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function W(t,n,e){var r=X.hasOwnProperty(t.type)?I:V;return function(i,a,o){var u,s=this.__on,c=r(n,a,o);if(s)for(var h=0,f=s.length;h<f;++h)if((u=s[h]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function Q(t,n,e,r){var i=$;t.sourceEvent=$,$=t;try{return n.apply(e,r)}finally{$=i}}var J=function(){for(var t,n=$;t=n.sourceEvent;)n=t;return n},G=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},K=function(t){var n=J();return n.changedTouches&&(n=n.changedTouches[0]),G(t,n)};function tt(){}var nt=function(t){return null==t?tt:function(){return this.querySelector(t)}};function et(){return[]}var rt=function(t){return null==t?et:function(){return this.querySelectorAll(t)}},it=function(t){return new Array(t.length)};function at(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}at.prototype={constructor:at,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function ot(t,n,e,r,i,a){for(var o,u=0,s=n.length,c=a.length;u<c;++u)(o=n[u])?(o.__data__=a[u],r[u]=o):e[u]=new at(t,a[u]);for(;u<s;++u)(o=n[u])&&(i[u]=o)}function ut(t,n,e,r,i,a,o){var u,s,c,h={},f=n.length,l=a.length,_=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(_[u]=c="$"+o.call(s,s.__data__,u,n),c in h?i[u]=s:h[c]=s);for(u=0;u<l;++u)(s=h[c="$"+o.call(t,a[u],u,a)])?(r[u]=s,s.__data__=a[u],h[c]=null):e[u]=new at(t,a[u]);for(u=0;u<f;++u)(s=n[u])&&h[_[u]]===s&&(i[u]=s)}function st(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function ct(t){return function(){this.removeAttribute(t)}}function ht(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ft(t,n){return function(){this.setAttribute(t,n)}}function lt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function _t(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function dt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var pt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function vt(t){return function(){this.style.removeProperty(t)}}function yt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function gt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function bt(t,n){return t.style.getPropertyValue(n)||pt(t).getComputedStyle(t,null).getPropertyValue(n)}function xt(t){return function(){delete this[t]}}function mt(t,n){return function(){this[t]=n}}function wt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Mt(t){return t.trim().split(/^|\s+/)}function kt(t){return t.classList||new Tt(t)}function Tt(t){this._node=t,this._names=Mt(t.getAttribute("class")||"")}function Nt(t,n){for(var e=kt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Ct(t,n){for(var e=kt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function St(t){return function(){Nt(this,t)}}function At(t){return function(){Ct(this,t)}}function Et(t,n){return function(){(n.apply(this,arguments)?Nt:Ct)(this,t)}}Tt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Dt(){this.textContent=""}function Ut(t){return function(){this.textContent=t}}function Pt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Lt(){this.innerHTML=""}function Rt(t){return function(){this.innerHTML=t}}function Ft(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function zt(){this.nextSibling&&this.parentNode.appendChild(this)}function Yt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function jt(){return null}function qt(){var t=this.parentNode;t&&t.removeChild(this)}function Ht(t,n,e){var r=pt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Ot(t,n){return function(){return Ht(this,t,n)}}function Xt(t,n){return function(){return Ht(this,t,n.apply(this,arguments))}}var $t=[null];function It(t,n){this._groups=t,this._parents=n}function Vt(){return new It([[document.documentElement]],$t)}It.prototype=Vt.prototype={constructor:It,select:function(t){"function"!=typeof t&&(t=nt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,o,u=n[i],s=u.length,c=r[i]=new Array(s),h=0;h<s;++h)(a=u[h])&&(o=t.call(a,a.__data__,h,u))&&("__data__"in a&&(o.__data__=a.__data__),c[h]=o);return new It(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=rt(t));for(var n=this._groups,e=n.length,r=[],i=[],a=0;a<e;++a)for(var o,u=n[a],s=u.length,c=0;c<s;++c)(o=u[c])&&(r.push(t.call(o,o.__data__,c,u)),i.push(o));return new It(r,i)},filter:function(t){"function"!=typeof t&&(t=O(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,o=n[i],u=o.length,s=r[i]=[],c=0;c<u;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&s.push(a);return new It(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),h=-1,this.each((function(t){d[++h]=t})),d;var e,r=n?ut:ot,i=this._parents,a=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var o=a.length,u=new Array(o),s=new Array(o),c=new Array(o),h=0;h<o;++h){var f=i[h],l=a[h],_=l.length,d=t.call(f,f&&f.__data__,h,i),p=d.length,v=s[h]=new Array(p),y=u[h]=new Array(p);r(f,l,v,y,c[h]=new Array(_),d,n);for(var g,b,x=0,m=0;x<p;++x)if(g=v[x]){for(x>=m&&(m=x+1);!(b=y[m])&&++m<p;);g._next=b||null}}return(u=new It(u,i))._enter=s,u._exit=c,u},enter:function(){return new It(this._enter||this._groups.map(it),this._parents)},exit:function(){return new It(this._exit||this._groups.map(it),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,c=n[u],h=e[u],f=c.length,l=o[u]=new Array(f),_=0;_<f;++_)(s=c[_]||h[_])&&(l[_]=s);for(;u<r;++u)o[u]=n[u];return new It(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=st);for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a){for(var o,u=e[a],s=u.length,c=i[a]=new Array(s),h=0;h<s;++h)(o=u[h])&&(c[h]=o);c.sort(n)}return new It(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,a=n[e],o=0,u=a.length;o<u;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,n){var e=P(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?ht:ct:"function"==typeof n?e.local?dt:_t:e.local?lt:ft)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?vt:"function"==typeof n?gt:yt)(t,n,null==e?"":e)):bt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?xt:"function"==typeof n?wt:mt)(t,n)):this.node()[t]},classed:function(t,n){var e=Mt(t+"");if(arguments.length<2){for(var r=kt(this.node()),i=-1,a=e.length;++i<a;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Et:n?St:At)(e,n))},text:function(t){return arguments.length?this.each(null==t?Dt:("function"==typeof t?Pt:Ut)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Lt:("function"==typeof t?Ft:Rt)(t)):this.node().innerHTML},raise:function(){return this.each(zt)},lower:function(){return this.each(Yt)},append:function(t){var n="function"==typeof t?t:F(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:F(t),r=null==n?jt:"function"==typeof n?n:nt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(qt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,a=B(t+""),o=a.length;if(!(arguments.length<2)){for(u=n?W:Z,null==e&&(e=!1),r=0;r<o;++r)this.each(u(a[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,h=u.length;c<h;++c)for(r=0,s=u[c];r<o;++r)if((i=a[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Xt:Ot)(t,n))}};var Bt=Vt,Zt=function(t){return"string"==typeof t?new It([[document.querySelector(t)]],[document.documentElement]):new It([[t]],$t)},Wt=function(t,n,e){arguments.length<3&&(e=n,n=J().changedTouches);for(var r,i=0,a=n?n.length:0;i<a;++i)if((r=n[i]).identifier===e)return G(t,r);return null};function Qt(){$.stopImmediatePropagation()}var Jt=function(){$.preventDefault(),$.stopImmediatePropagation()},Gt=function(t){var n=t.document.documentElement,e=Zt(t).on("dragstart.drag",Jt,!0);"onselectstart"in n?e.on("selectstart.drag",Jt,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function Kt(t,n){var e=t.document.documentElement,r=Zt(t).on("dragstart.drag",null);n&&(r.on("click.drag",Jt,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var tn=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function nn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function en(){}var rn="\\s*([+-]?\\d+)\\s*",an="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",on="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",un=/^#([0-9a-f]{3,8})$/,sn=new RegExp("^rgb\\("+[rn,rn,rn]+"\\)$"),cn=new RegExp("^rgb\\("+[on,on,on]+"\\)$"),hn=new RegExp("^rgba\\("+[rn,rn,rn,an]+"\\)$"),fn=new RegExp("^rgba\\("+[on,on,on,an]+"\\)$"),ln=new RegExp("^hsl\\("+[an,on,on]+"\\)$"),_n=new RegExp("^hsla\\("+[an,on,on,an]+"\\)$"),dn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function pn(){return this.rgb().formatHex()}function vn(){return this.rgb().formatRgb()}function yn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=un.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?gn(n):3===e?new wn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new wn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new wn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=sn.exec(t))?new wn(n[1],n[2],n[3],1):(n=cn.exec(t))?new wn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=hn.exec(t))?bn(n[1],n[2],n[3],n[4]):(n=fn.exec(t))?bn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ln.exec(t))?Nn(n[1],n[2]/100,n[3]/100,1):(n=_n.exec(t))?Nn(n[1],n[2]/100,n[3]/100,n[4]):dn.hasOwnProperty(t)?gn(dn[t]):"transparent"===t?new wn(NaN,NaN,NaN,0):null}function gn(t){return new wn(t>>16&255,t>>8&255,255&t,1)}function bn(t,n,e,r){return r<=0&&(t=n=e=NaN),new wn(t,n,e,r)}function xn(t){return t instanceof en||(t=yn(t)),t?new wn((t=t.rgb()).r,t.g,t.b,t.opacity):new wn}function mn(t,n,e,r){return 1===arguments.length?xn(t):new wn(t,n,e,null==r?1:r)}function wn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Mn(){return"#"+Tn(this.r)+Tn(this.g)+Tn(this.b)}function kn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Tn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Nn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Sn(t,n,e,r)}function Cn(t){if(t instanceof Sn)return new Sn(t.h,t.s,t.l,t.opacity);if(t instanceof en||(t=yn(t)),!t)return new Sn;if(t instanceof Sn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=Math.max(n,e,r),o=NaN,u=a-i,s=(a+i)/2;return u?(o=n===a?(e-r)/u+6*(e<r):e===a?(r-n)/u+2:(n-e)/u+4,u/=s<.5?a+i:2-a-i,o*=60):u=s>0&&s<1?0:o,new Sn(o,u,s,t.opacity)}function Sn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function An(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function En(t,n,e,r,i){var a=t*t,o=a*t;return((1-3*t+3*a-o)*n+(4-6*a+3*o)*e+(1+3*t+3*a-3*o)*r+o*i)/6}tn(en,yn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:pn,formatHex:pn,formatHsl:function(){return Cn(this).formatHsl()},formatRgb:vn,toString:vn}),tn(wn,mn,nn(en,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new wn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new wn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Mn,formatHex:Mn,formatRgb:kn,toString:kn})),tn(Sn,(function(t,n,e,r){return 1===arguments.length?Cn(t):new Sn(t,n,e,null==r?1:r)}),nn(en,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Sn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Sn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new wn(An(t>=240?t-240:t+120,i,r),An(t,i,r),An(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Dn=function(t){return function(){return t}};function Un(t,n){return function(e){return t+e*n}}function Pn(t){return 1==(t=+t)?Ln:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Dn(isNaN(n)?e:n)}}function Ln(t,n){var e=n-t;return e?Un(t,e):Dn(isNaN(t)?n:t)}var Rn=function t(n){var e=Pn(n);function r(t,n){var r=e((t=mn(t)).r,(n=mn(n)).r),i=e(t.g,n.g),a=e(t.b,n.b),o=Ln(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=a(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function Fn(t){return function(n){var e,r,i=n.length,a=new Array(i),o=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=mn(n[e]),a[e]=r.r||0,o[e]=r.g||0,u[e]=r.b||0;return a=t(a),o=t(o),u=t(u),r.opacity=1,function(t){return r.r=a(t),r.g=o(t),r.b=u(t),r+""}}}Fn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],a=t[r+1],o=r>0?t[r-1]:2*i-a,u=r<n-1?t[r+2]:2*a-i;return En((e-r/n)*n,o,i,a,u)}})),Fn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],a=t[r%n],o=t[(r+1)%n],u=t[(r+2)%n];return En((e-r/n)*n,i,a,o,u)}}));var zn=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(a){for(e=0;e<r;++e)i[e]=t[e]*(1-a)+n[e]*a;return i}};function Yn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function jn(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(e=0;e<i;++e)a[e]=Zn(t[e],n[e]);for(;e<r;++e)o[e]=n[e];return function(t){for(e=0;e<i;++e)o[e]=a[e](t);return o}}var qn=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},Hn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},On=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Zn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Xn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,$n=new RegExp(Xn.source,"g");var In,Vn,Bn=function(t,n){var e,r,i,a=Xn.lastIndex=$n.lastIndex=0,o=-1,u=[],s=[];for(t+="",n+="";(e=Xn.exec(t))&&(r=$n.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),u[o]?u[o]+=i:u[++o]=i),(e=e[0])===(r=r[0])?u[o]?u[o]+=r:u[++o]=r:(u[++o]=null,s.push({i:o,x:Hn(e,r)})),a=$n.lastIndex;return a<n.length&&(i=n.slice(a),u[o]?u[o]+=i:u[++o]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},Zn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Dn(n):("number"===r?Hn:"string"===r?(e=yn(n))?(n=e,Rn):Bn:n instanceof yn?Rn:n instanceof Date?qn:Yn(n)?zn:Array.isArray(n)?jn:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?On:Hn)(t,n)},Wn=0,Qn=0,Jn=0,Gn=0,Kn=0,te=0,ne="object"==typeof performance&&performance.now?performance:Date,ee="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function re(){return Kn||(ee(ie),Kn=ne.now()+te)}function ie(){Kn=0}function ae(){this._call=this._time=this._next=null}function oe(t,n,e){var r=new ae;return r.restart(t,n,e),r}function ue(){Kn=(Gn=ne.now())+te,Wn=Qn=0;try{!function(){re(),++Wn;for(var t,n=In;n;)(t=Kn-n._time)>=0&&n._call.call(null,t),n=n._next;--Wn}()}finally{Wn=0,function(){var t,n,e=In,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:In=n);Vn=t,ce(r)}(),Kn=0}}function se(){var t=ne.now(),n=t-Gn;n>1e3&&(te-=n,Gn=t)}function ce(t){Wn||(Qn&&(Qn=clearTimeout(Qn)),t-Kn>24?(t<1/0&&(Qn=setTimeout(ue,t-ne.now()-te)),Jn&&(Jn=clearInterval(Jn))):(Jn||(Gn=ne.now(),Jn=setInterval(se,1e3)),Wn=1,ee(ue)))}ae.prototype=oe.prototype={constructor:ae,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?re():+e)+(null==n?0:+n),this._next||Vn===this||(Vn?Vn._next=this:In=this,Vn=this),this._call=t,this._time=e,ce()},stop:function(){this._call&&(this._call=null,this._time=1/0,ce())}};var he=function(t,n,e){var r=new ae;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},fe=E("start","end","cancel","interrupt"),le=[],_e=function(t,n,e,r,i,a){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function a(s){var c,h,f,l;if(1!==e.state)return u();for(c in i)if((l=i[c]).name===e.name){if(3===l.state)return he(a);4===l.state?(l.state=6,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[c]):+c<n&&(l.state=6,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete i[c])}if(he((function(){3===e.state&&(e.state=4,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,h=-1;c<f;++c)(l=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++h]=l);r.length=h+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),a=-1,o=r.length;++a<o;)r[a].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=oe((function(t){e.state=1,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:fe,tween:le,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:0})};function de(t,n){var e=ve(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function pe(t,n){var e=ve(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ve(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var ye,ge,be,xe,me=function(t,n){var e,r,i,a=t.__transition,o=!0;if(a){for(i in n=null==n?null:n+"",a)(e=a[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[i]):o=!1;o&&delete t.__transition}},we=180/Math.PI,Me={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ke=function(t,n,e,r,i,a){var o,u,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(n,t)*we,skewX:Math.atan(s)*we,scaleX:o,scaleY:u}};function Te(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var u=[],s=[];return a=t(a),o=t(o),function(t,r,i,a,o,u){if(t!==i||r!==a){var s=o.push("translate(",null,n,null,e);u.push({i:s-4,x:Hn(t,i)},{i:s-2,x:Hn(r,a)})}else(i||a)&&o.push("translate("+i+n+a+e)}(a.translateX,a.translateY,o.translateX,o.translateY,u,s),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Hn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(a.rotate,o.rotate,u,s),function(t,n,e,a){t!==n?a.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Hn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(a.skewX,o.skewX,u,s),function(t,n,e,r,a,o){if(t!==e||n!==r){var u=a.push(i(a)+"scale(",null,",",null,")");o.push({i:u-4,x:Hn(t,e)},{i:u-2,x:Hn(n,r)})}else 1===e&&1===r||a.push(i(a)+"scale("+e+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,u,s),a=o=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var Ne=Te((function(t){return"none"===t?Me:(ye||(ye=document.createElement("DIV"),ge=document.documentElement,be=document.defaultView),ye.style.transform=t,t=be.getComputedStyle(ge.appendChild(ye),null).getPropertyValue("transform"),ge.removeChild(ye),t=t.slice(7,-1).split(","),ke(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Ce=Te((function(t){return null==t?Me:(xe||(xe=document.createElementNS("http://www.w3.org/2000/svg","g")),xe.setAttribute("transform",t),(t=xe.transform.baseVal.consolidate())?(t=t.matrix,ke(t.a,t.b,t.c,t.d,t.e,t.f)):Me)}),", ",")",")");function Se(t,n){var e,r;return function(){var i=pe(this,t),a=i.tween;if(a!==e)for(var o=0,u=(r=e=a).length;o<u;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function Ae(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var a=pe(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var u={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=u;break}s===c&&i.push(u)}a.tween=i}}function Ee(t,n,e){var r=t._id;return t.each((function(){var t=pe(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ve(t,r).value[n]}}var De=function(t,n){var e;return("number"==typeof n?Hn:n instanceof yn?Rn:(e=yn(n))?(n=e,Rn):Bn)(t,n)};function Ue(t){return function(){this.removeAttribute(t)}}function Pe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Le(t,n,e){var r,i,a=e+"";return function(){var o=this.getAttribute(t);return o===a?null:o===r?i:i=n(r=o,e)}}function Re(t,n,e){var r,i,a=e+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===a?null:o===r?i:i=n(r=o,e)}}function Fe(t,n,e){var r,i,a;return function(){var o,u,s=e(this);if(null!=s)return(o=this.getAttribute(t))===(u=s+"")?null:o===r&&u===i?a:(i=u,a=n(r=o,s));this.removeAttribute(t)}}function ze(t,n,e){var r,i,a;return function(){var o,u,s=e(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:o===r&&u===i?a:(i=u,a=n(r=o,s));this.removeAttributeNS(t.space,t.local)}}function Ye(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function je(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function qe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&je(t,i)),e}return i._value=n,i}function He(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ye(t,i)),e}return i._value=n,i}function Oe(t,n){return function(){de(this,t).delay=+n.apply(this,arguments)}}function Xe(t,n){return n=+n,function(){de(this,t).delay=n}}function $e(t,n){return function(){pe(this,t).duration=+n.apply(this,arguments)}}function Ie(t,n){return n=+n,function(){pe(this,t).duration=n}}function Ve(t,n){if("function"!=typeof n)throw new Error;return function(){pe(this,t).ease=n}}function Be(t,n,e){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?de:pe;return function(){var o=a(this,t),u=o.on;u!==r&&(i=(r=u).copy()).on(n,e),o.on=i}}var Ze=Bt.prototype.constructor;function We(t){return function(){this.style.removeProperty(t)}}function Qe(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Je(t,n,e){var r,i;function a(){var a=n.apply(this,arguments);return a!==i&&(r=(i=a)&&Qe(t,a,e)),r}return a._value=n,a}function Ge(t){return function(n){this.textContent=t.call(this,n)}}function Ke(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Ge(r)),n}return r._value=t,r}var tr=0;function nr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function er(){return++tr}var rr=Bt.prototype;nr.prototype=function(t){return Bt().transition(t)}.prototype={constructor:nr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=nt(t));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var u,s,c=r[o],h=c.length,f=a[o]=new Array(h),l=0;l<h;++l)(u=c[l])&&(s=t.call(u,u.__data__,l,c))&&("__data__"in u&&(s.__data__=u.__data__),f[l]=s,_e(f[l],n,e,l,f,ve(u,e)));return new nr(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=rt(t));for(var r=this._groups,i=r.length,a=[],o=[],u=0;u<i;++u)for(var s,c=r[u],h=c.length,f=0;f<h;++f)if(s=c[f]){for(var l,_=t.call(s,s.__data__,f,c),d=ve(s,e),p=0,v=_.length;p<v;++p)(l=_[p])&&_e(l,n,e,p,_,d);a.push(_),o.push(s)}return new nr(a,o,n,e)},filter:function(t){"function"!=typeof t&&(t=O(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,o=n[i],u=o.length,s=r[i]=[],c=0;c<u;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&s.push(a);return new nr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,c=n[u],h=e[u],f=c.length,l=o[u]=new Array(f),_=0;_<f;++_)(s=c[_]||h[_])&&(l[_]=s);for(;u<r;++u)o[u]=n[u];return new nr(o,this._parents,this._name,this._id)},selection:function(){return new Ze(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=er(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,u=r[a],s=u.length,c=0;c<s;++c)if(o=u[c]){var h=ve(o,n);_e(o,t,e,c,u,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new nr(r,this._parents,t,e)},call:rr.call,nodes:rr.nodes,node:rr.node,size:rr.size,empty:rr.empty,each:rr.each,on:function(t,n){var e=this._id;return arguments.length<2?ve(this.node(),e).on.on(t):this.each(Be(e,t,n))},attr:function(t,n){var e=P(t),r="transform"===e?Ce:De;return this.attrTween(t,"function"==typeof n?(e.local?ze:Fe)(e,r,Ee(this,"attr."+t,n)):null==n?(e.local?Pe:Ue)(e):(e.local?Re:Le)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=P(t);return this.tween(e,(r.local?qe:He)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ne:De;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=bt(this,t),o=(this.style.removeProperty(t),bt(this,t));return a===o?null:a===e&&o===r?i:i=n(e=a,r=o)}}(t,r)).on("end.style."+t,We(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var o=bt(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=bt(this,t)),o===s?null:o===r&&s===i?a:(i=s,a=n(r=o,u))}}(t,r,Ee(this,"style."+t,n))).each(function(t,n){var e,r,i,a,o="style."+n,u="end."+o;return function(){var s=pe(this,t),c=s.on,h=null==s.value[o]?a||(a=We(n)):void 0;c===e&&i===h||(r=(e=c).copy()).on(u,i=h),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var o=bt(this,t);return o===a?null:o===r?i:i=n(r=o,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Je(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ee(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Ke(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ve(this.node(),e).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==n?Se:Ae)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Oe:Xe)(n,t)):ve(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?$e:Ie)(n,t)):ve(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ve(n,t)):ve(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(a,o){var u={value:o},s={value:function(){0==--i&&a()}};e.each((function(){var e=pe(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n}))}))}};var ir={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ar(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ir.time=re(),ir;return e}Bt.prototype.interrupt=function(t){return this.each((function(){me(this,t)}))},Bt.prototype.transition=function(t){var n,e;t instanceof nr?(n=t._id,t=t._name):(n=er(),(e=ir).time=re(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,u=r[a],s=u.length,c=0;c<s;++c)(o=u[c])&&_e(o,t,n,c,u,e||ar(o,n));return new nr(r,this._parents,t,n)};var or=function(t){return function(){return t}},ur=function(t,n,e){this.target=t,this.type=n,this.selection=e};function sr(){$.stopImmediatePropagation()}var cr=function(){$.preventDefault(),$.stopImmediatePropagation()},hr={name:"drag"},fr={name:"space"},lr={name:"handle"},_r={name:"center"};function dr(t){return[+t[0],+t[1]]}function pr(t){return[dr(t[0]),dr(t[1])]}function vr(t){return function(n){return Wt(n,$.touches,t)}}var yr={name:"x",handles:["w","e"].map(kr),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},gr={name:"y",handles:["n","s"].map(kr),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},br=(["n","w","e","s","nw","ne","sw","se"].map(kr),{overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"}),xr={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},mr={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},wr={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Mr={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function kr(t){return{type:t}}function Tr(){return!$.ctrlKey&&!$.button}function Nr(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Cr(){return navigator.maxTouchPoints||"ontouchstart"in this}function Sr(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ar(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Er(t){var n,e=Nr,r=Tr,i=Cr,a=!0,o=E("start","brush","end"),u=6;function s(n){var e=n.property("__brush",p).selectAll(".overlay").data([kr("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",br.overlay).merge(e).each((function(){var t=Sr(this).extent;Zt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([kr("selection")]).enter().append("rect").attr("class","selection").attr("cursor",br.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return br[t.type]})),n.each(c).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",l).filter(i).on("touchstart.brush",l).on("touchmove.brush",_).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function c(){var t=Zt(this),n=Sr(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-u/2:n[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-u/2:n[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function h(t,n,e){return!e&&t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function l(){if((!n||$.touches)&&r.apply(this,arguments)){var e,i,o,u,s,f,l,_,d,p,v,y=this,g=$.target.__data__.type,b="selection"===(a&&$.metaKey?g="overlay":g)?hr:a&&$.altKey?_r:lr,x=t===gr?null:wr[g],m=t===yr?null:Mr[g],w=Sr(y),M=w.extent,k=w.selection,T=M[0][0],N=M[0][1],C=M[1][0],S=M[1][1],A=0,E=0,D=x&&m&&a&&$.shiftKey,U=$.touches?vr($.changedTouches[0].identifier):K,P=U(y),L=P,R=h(y,arguments,!0).beforestart();"overlay"===g?(k&&(d=!0),w.selection=k=[[e=t===gr?T:P[0],o=t===yr?N:P[1]],[s=t===gr?C:e,l=t===yr?S:o]]):(e=k[0][0],o=k[0][1],s=k[1][0],l=k[1][1]),i=e,u=o,f=s,_=l;var F=Zt(y).attr("pointer-events","none"),z=F.selectAll(".overlay").attr("cursor",br[g]);if($.touches)R.moved=j,R.ended=H;else{var Y=Zt($.view).on("mousemove.brush",j,!0).on("mouseup.brush",H,!0);a&&Y.on("keydown.brush",O,!0).on("keyup.brush",X,!0),Gt($.view)}sr(),me(y),c.call(y),R.start()}function j(){var t=U(y);!D||p||v||(Math.abs(t[0]-L[0])>Math.abs(t[1]-L[1])?v=!0:p=!0),L=t,d=!0,cr(),q()}function q(){var t;switch(A=L[0]-P[0],E=L[1]-P[1],b){case fr:case hr:x&&(A=Math.max(T-e,Math.min(C-s,A)),i=e+A,f=s+A),m&&(E=Math.max(N-o,Math.min(S-l,E)),u=o+E,_=l+E);break;case lr:x<0?(A=Math.max(T-e,Math.min(C-e,A)),i=e+A,f=s):x>0&&(A=Math.max(T-s,Math.min(C-s,A)),i=e,f=s+A),m<0?(E=Math.max(N-o,Math.min(S-o,E)),u=o+E,_=l):m>0&&(E=Math.max(N-l,Math.min(S-l,E)),u=o,_=l+E);break;case _r:x&&(i=Math.max(T,Math.min(C,e-A*x)),f=Math.max(T,Math.min(C,s+A*x))),m&&(u=Math.max(N,Math.min(S,o-E*m)),_=Math.max(N,Math.min(S,l+E*m)))}f<i&&(x*=-1,t=e,e=s,s=t,t=i,i=f,f=t,g in xr&&z.attr("cursor",br[g=xr[g]])),_<u&&(m*=-1,t=o,o=l,l=t,t=u,u=_,_=t,g in mr&&z.attr("cursor",br[g=mr[g]])),w.selection&&(k=w.selection),p&&(i=k[0][0],f=k[1][0]),v&&(u=k[0][1],_=k[1][1]),k[0][0]===i&&k[0][1]===u&&k[1][0]===f&&k[1][1]===_||(w.selection=[[i,u],[f,_]],c.call(y),R.brush())}function H(){if(sr(),$.touches){if($.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Kt($.view,d),Y.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);F.attr("pointer-events","all"),z.attr("cursor",br.overlay),w.selection&&(k=w.selection),Ar(k)&&(w.selection=null,c.call(y)),R.end()}function O(){switch($.keyCode){case 16:D=x&&m;break;case 18:b===lr&&(x&&(s=f-A*x,e=i+A*x),m&&(l=_-E*m,o=u+E*m),b=_r,q());break;case 32:b!==lr&&b!==_r||(x<0?s=f-A:x>0&&(e=i-A),m<0?l=_-E:m>0&&(o=u-E),b=fr,z.attr("cursor",br.selection),q());break;default:return}cr()}function X(){switch($.keyCode){case 16:D&&(p=v=D=!1,q());break;case 18:b===_r&&(x<0?s=f:x>0&&(e=i),m<0?l=_:m>0&&(o=u),b=lr,q());break;case 32:b===fr&&($.altKey?(x&&(s=f-A*x,e=i+A*x),m&&(l=_-E*m,o=u+E*m),b=_r):(x<0?s=f:x>0&&(e=i),m<0?l=_:m>0&&(o=u),b=lr),z.attr("cursor",br[g]),q());break;default:return}cr()}}function _(){h(this,arguments).moved()}function d(){h(this,arguments).ended()}function p(){var n=this.__brush||{selection:null};return n.extent=pr(e.apply(this,arguments)),n.dim=t,n}return s.move=function(n,e){n.selection?n.on("start.brush",(function(){h(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){h(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=h(n,arguments),a=r.selection,o=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),u=Zn(a,o);function s(t){r.selection=1===t&&null===o?null:u(t),c.call(n),i.brush()}return null!==a&&null!==o?s:s(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,a=t.input("function"==typeof e?e.apply(n,r):e,i.extent),o=h(n,r).beforestart();me(n),i.selection=null===a?null:a,c.call(n),o.start().brush().end()}))},s.clear=function(t){s.move(t,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Q(new ur(s,n,t.output(this.state.selection)),o.apply,o,[n,this.that,this.args])}},s.extent=function(t){return arguments.length?(e="function"==typeof t?t:or(pr(t)),s):e},s.filter=function(t){return arguments.length?(r="function"==typeof t?t:or(!!t),s):r},s.handleSize=function(t){return arguments.length?(u=+t,s):u},s.keyModifiers=function(t){return arguments.length?(a=!!t,s):a},s.on=function(){var t=o.on.apply(o,arguments);return t===o?s:t},s}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Dr=Math.PI,Ur=2*Dr,Pr=Ur-1e-6;function Lr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Rr(){return new Lr}Lr.prototype=Rr.prototype={constructor:Lr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var a=this._x1,o=this._y1,u=e-t,s=r-n,c=a-t,h=o-n,f=c*c+h*h;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(h*u-s*c)>1e-6&&i){var l=e-a,_=r-o,d=u*u+s*s,p=l*l+_*_,v=Math.sqrt(d),y=Math.sqrt(f),g=i*Math.tan((Dr-Math.acos((d+f-p)/(2*v*y)))/2),b=g/y,x=g/v;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(n+b*h)),this._+="A"+i+","+i+",0,0,"+ +(h*l>c*_)+","+(this._x1=t+x*u)+","+(this._y1=n+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,a){t=+t,n=+n,a=!!a;var o=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+o,c=n+u,h=1^a,f=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%Ur+Ur),f>Pr?this._+="A"+e+","+e+",0,1,"+h+","+(t-o)+","+(n-u)+"A"+e+","+e+",0,1,"+h+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Dr)+","+h+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Fr=Rr;function zr(){}function Yr(t,n){var e=new zr;if(t instanceof zr)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==n)for(;++i<a;)e.set(i,t[i]);else for(;++i<a;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}zr.prototype=Yr.prototype={constructor:zr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var jr=Yr;function qr(){}var Hr=jr.prototype;function Or(t,n){var e=new qr;if(t instanceof qr)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}qr.prototype=Or.prototype={constructor:qr,has:Hr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Hr.remove,clear:Hr.clear,values:Hr.keys,size:Hr.size,empty:Hr.empty,each:Hr.each};var Xr=function(t){return function(){return t}};function $r(t,n,e,r,i,a,o,u,s,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=a,this.y=o,this.dx=u,this.dy=s,this._=c}function Ir(){return!$.ctrlKey&&!$.button}function Vr(){return this.parentNode}function Br(t){return null==t?{x:$.x,y:$.y}:t}function Zr(){return navigator.maxTouchPoints||"ontouchstart"in this}$r.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Wr={},Qr={};function Jr(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}var Gr=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],a=t.length,o=0,u=0,s=a<=0,c=!1;function h(){if(s)return Qr;if(c)return c=!1,Wr;var n,r,i=o;if(34===t.charCodeAt(i)){for(;o++<a&&34!==t.charCodeAt(o)||34===t.charCodeAt(++o););return(n=o)>=a?s=!0:10===(r=t.charCodeAt(o++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(o)&&++o),t.slice(i+1,n-1).replace(/""/g,'"')}for(;o<a;){if(10===(r=t.charCodeAt(n=o++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(o)&&++o;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,a)}for(10===t.charCodeAt(a-1)&&--a,13===t.charCodeAt(a-1)&&--a;(r=h())!==Qr;){for(var f=[];r!==Wr&&r!==Qr;)f.push(r),r=h();n&&null==(f=n(f,u++))||i.push(f)}return i}function i(n){return n.map(a).join(t)}function a(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,a=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Jr(t);return function(r,i){return n(e(r),i,t)}}(t,n):Jr(t)}));return a.columns=i||[],a},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}(n)),[e.map(a).join(t)].concat(n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},Kr=Gr(","),ti=Kr.parse,ni=(Kr.parseRows,Kr.format,Kr.formatRows,Gr("\t")),ei=ni.parse;ni.parseRows,ni.format,ni.formatRows;function ri(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,a,o,u,s,c,h,f,l,_=t._root,d={data:r},p=t._x0,v=t._y0,y=t._x1,g=t._y1;if(!_)return t._root=d,t;for(;_.length;)if((c=n>=(a=(p+y)/2))?p=a:y=a,(h=e>=(o=(v+g)/2))?v=o:g=o,i=_,!(_=_[f=h<<1|c]))return i[f]=d,t;if(u=+t._x.call(null,_.data),s=+t._y.call(null,_.data),n===u&&e===s)return d.next=_,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(a=(p+y)/2))?p=a:y=a,(h=e>=(o=(v+g)/2))?v=o:g=o}while((f=h<<1|c)==(l=(s>=o)<<1|u>=a));return i[l]=_,i[f]=d,t}var ii=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function ai(t){return t[0]}function oi(t){return t[1]}function ui(t,n,e){var r=new si(null==n?ai:n,null==e?oi:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function si(t,n,e,r,i,a){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function ci(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var hi=ui.prototype=si.prototype;hi.copy=function(){var t,n,e=new si(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ci(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ci(n));return e},hi.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return ri(this.cover(n,e),n,e,t)},hi.addAll=function(t){var n,e,r,i,a=t.length,o=new Array(a),u=new Array(a),s=1/0,c=1/0,h=-1/0,f=-1/0;for(e=0;e<a;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,u[e]=i,r<s&&(s=r),r>h&&(h=r),i<c&&(c=i),i>f&&(f=i));for(h<s&&(s=this._x0,h=this._x1),f<c&&(c=this._y0,f=this._y1),this.cover(s,c).cover(h,f),e=0;e<a;++e)ri(this,o[e],u[e],t[e]);return this},hi.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,a=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>a))return this;var o,u,s=i-e,c=this._root;switch(u=(n<(r+a)/2)<<1|t<(e+i)/2){case 0:do{(o=new Array(4))[u]=c,c=o}while(a=r+(s*=2),t>(i=e+s)||n>a);break;case 1:do{(o=new Array(4))[u]=c,c=o}while(a=r+(s*=2),(e=i-s)>t||n>a);break;case 2:do{(o=new Array(4))[u]=c,c=o}while(r=a-(s*=2),t>(i=e+s)||r>n);break;case 3:do{(o=new Array(4))[u]=c,c=o}while(r=a-(s*=2),(e=i-s)>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=a,this},hi.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},hi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},hi.find=function(t,n,e){var r,i,a,o,u,s,c,h=this._x0,f=this._y0,l=this._x1,_=this._y1,d=[],p=this._root;for(p&&d.push(new ii(p,h,f,l,_)),null==e?e=1/0:(h=t-e,f=n-e,l=t+e,_=n+e,e*=e);s=d.pop();)if(!(!(p=s.node)||(i=s.x0)>l||(a=s.y0)>_||(o=s.x1)<h||(u=s.y1)<f))if(p.length){var v=(i+o)/2,y=(a+u)/2;d.push(new ii(p[3],v,y,o,u),new ii(p[2],i,y,v,u),new ii(p[1],v,a,o,y),new ii(p[0],i,a,v,y)),(c=(n>=y)<<1|t>=v)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-c],d[d.length-1-c]=s)}else{var g=t-+this._x.call(null,p.data),b=n-+this._y.call(null,p.data),x=g*g+b*b;if(x<e){var m=Math.sqrt(e=x);h=t-m,f=n-m,l=t+m,_=n+m,r=p.data}}return r},hi.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,a,o,u,s,c,h,f,l,_=this._root,d=this._x0,p=this._y0,v=this._x1,y=this._y1;if(!_)return this;if(_.length)for(;;){if((c=a>=(u=(d+v)/2))?d=u:v=u,(h=o>=(s=(p+y)/2))?p=s:y=s,n=_,!(_=_[f=h<<1|c]))return this;if(!_.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,l=f)}for(;_.data!==t;)if(r=_,!(_=_.next))return this;return(i=_.next)&&delete _.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(_=n[0]||n[1]||n[2]||n[3])&&_===(n[3]||n[2]||n[1]||n[0])&&!_.length&&(e?e[l]=_:this._root=_),this):(this._root=i,this)},hi.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},hi.root=function(){return this._root},hi.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},hi.visit=function(t){var n,e,r,i,a,o,u=[],s=this._root;for(s&&u.push(new ii(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,a=n.x1,o=n.y1)&&s.length){var c=(r+a)/2,h=(i+o)/2;(e=s[3])&&u.push(new ii(e,c,h,a,o)),(e=s[2])&&u.push(new ii(e,r,h,c,o)),(e=s[1])&&u.push(new ii(e,c,i,a,h)),(e=s[0])&&u.push(new ii(e,r,i,c,h))}return this},hi.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new ii(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var a,o=n.x0,u=n.y0,s=n.x1,c=n.y1,h=(o+s)/2,f=(u+c)/2;(a=i[0])&&e.push(new ii(a,o,u,h,f)),(a=i[1])&&e.push(new ii(a,h,u,s,f)),(a=i[2])&&e.push(new ii(a,o,f,h,c)),(a=i[3])&&e.push(new ii(a,h,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},hi.x=function(t){return arguments.length?(this._x=t,this):this._x},hi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var fi,li=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},_i=function(t){return(t=li(Math.abs(t)))?t[1]:NaN},di=function(t,n){var e=li(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},pi={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,a=-1;i<r;++i)switch(t[i]){case".":a=e=i;break;case"0":0===a&&(a=i),e=i;break;case"e":break t;default:a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return di(100*t,n)},r:di,s:function(t,n){var e=li(t,n);if(!e)return t+"";var r=e[0],i=e[1],a=i-(fi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+li(t,Math.max(0,n+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},vi=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function yi(t){return new gi(t)}function gi(t){if(!(n=vi.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",a=n[4]||"",o=!!n[5],u=n[6]&&+n[6],s=!!n[7],c=n[8]&&+n[8].slice(1),h=n[9]||"";"n"===h?(s=!0,h="g"):pi[h]||(h=""),(o||"0"===e&&"="===r)&&(o=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=a,this.zero=o,this.width=u,this.comma=s,this.precision=c,this.type=h}yi.prototype=gi.prototype,gi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var bi,xi,mi,wi=function(t){return t},Mi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];bi=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,a=[],o=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),a.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[o=(o+1)%n.length];return a.reverse().join(e)}):wi,i=t.currency,a=t.decimal,o=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):wi,u=t.percent||"%";function s(t){var n=(t=yi(t)).fill,e=t.align,s=t.sign,c=t.symbol,h=t.zero,f=t.width,l=t.comma,_=t.precision,d=t.type,p="$"===c?i[0]:"#"===c&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",v="$"===c?i[1]:/[%p]/.test(d)?u:"",y=pi[d],g=!d||/[defgprs%]/.test(d);function b(t){var i,u,c,b=p,x=v;if("c"===d)x=y(t)+x,t="";else{var m=(t=+t)<0;if(t=y(Math.abs(t),_),m&&0==+t&&(m=!1),b=(m?"("===s?s:"-":"-"===s||"("===s?"":s)+b,x=("s"===d?Mi[8+fi/3]:"")+x+(m&&"("===s?")":""),g)for(i=-1,u=t.length;++i<u;)if(48>(c=t.charCodeAt(i))||c>57){x=(46===c?a+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}l&&!h&&(t=r(t,1/0));var w=b.length+t.length+x.length,M=w<f?new Array(f-w+1).join(n):"";switch(l&&h&&(t=r(M+t,M.length?f-x.length:1/0),M=""),e){case"<":t=b+t+x+M;break;case"=":t=b+M+t+x;break;case"^":t=M.slice(0,w=M.length>>1)+b+t+x+M.slice(w);break;default:t=M+b+t+x}return o(t)}return _=null==_?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,_)):Math.max(0,Math.min(20,_)),b.toString=function(){return t+""},b}return{format:s,formatPrefix:function(t,n){var e=s(((t=yi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(_i(n)/3))),i=Math.pow(10,-r),a=Mi[8+r/3];return function(t){return e(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),xi=bi.format,mi=bi.formatPrefix;var ki=function(){return new Ti};function Ti(){this.reset()}Ti.prototype={constructor:Ti,reset:function(){this.s=this.t=0},add:function(t){Ci(Ni,t,this.t),Ci(this,Ni.s,this.s),this.s?this.t+=Ni.t:this.s=Ni.t},valueOf:function(){return this.s}};var Ni=new Ti;function Ci(t,n,e){var r=t.s=n+e,i=r-n,a=r-i;t.t=n-a+(e-i)}var Si=Math.PI,Ai=Si/2,Ei=Si/4,Di=2*Si,Ui=Si/180,Pi=Math.abs,Li=Math.atan,Ri=Math.atan2,Fi=Math.cos,zi=(Math.ceil,Math.exp),Yi=(Math.floor,Math.log),ji=(Math.pow,Math.sin),qi=(Math.sign,Math.sqrt),Hi=Math.tan;function Oi(t){return t>1?0:t<-1?Si:Math.acos(t)}function Xi(t){return t>1?Ai:t<-1?-Ai:Math.asin(t)}function $i(){}ki(),ki();function Ii(t){var n=t[0],e=t[1],r=Fi(e);return[r*Fi(n),r*ji(n),ji(e)]}function Vi(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Bi(t){var n=qi(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}ki();function Zi(t,n){return[t>Si?t-Di:t<-Si?t+Di:t,n]}Zi.invert=Zi;var Wi=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:$i,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Qi=function(t,n){return Pi(t[0]-n[0])<1e-6&&Pi(t[1]-n[1])<1e-6};function Ji(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Gi=function(t,n,e,r,i){var a,o,u=[],s=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],o=t[n];if(Qi(r,o)){for(i.lineStart(),a=0;a<n;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else u.push(e=new Ji(r,t,null,!0)),s.push(e.o=new Ji(r,null,e,!1)),u.push(e=new Ji(o,t,null,!1)),s.push(e.o=new Ji(o,null,e,!0))}})),u.length){for(s.sort(n),Ki(u),Ki(s),a=0,o=s.length;a<o;++a)s[a].e=e=!e;for(var c,h,f=u[0];;){for(var l=f,_=!0;l.v;)if((l=l.n)===f)return;c=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(_)for(a=0,o=c.length;a<o;++a)i.point((h=c[a])[0],h[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(_)for(c=l.p.z,a=c.length-1;a>=0;--a)i.point((h=c[a])[0],h[1]);else r(l.x,l.p.x,-1,i);l=l.p}c=(l=l.o).z,_=!_}while(!l.v);i.lineEnd()}}};function Ki(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var ta=ki(),na=function(t,n){var e=n[0],r=n[1],i=[ji(e),-Fi(e),0],a=0,o=0;ta.reset();for(var u=0,s=t.length;u<s;++u)if(h=(c=t[u]).length)for(var c,h,f=c[h-1],l=f[0],_=f[1]/2+Ei,d=ji(_),p=Fi(_),v=0;v<h;++v,l=g,d=x,p=m,f=y){var y=c[v],g=y[0],b=y[1]/2+Ei,x=ji(b),m=Fi(b),w=g-l,M=w>=0?1:-1,k=M*w,T=k>Si,N=d*x;if(ta.add(Ri(N*M*ji(k),p*m+N*Fi(k))),a+=T?w+M*Di:w,T^l>=e^g>=e){var C=Vi(Ii(f),Ii(y));Bi(C);var S=Vi(i,C);Bi(S);var A=(T^w>=0?-1:1)*Xi(S[2]);(r>A||r===A&&(C[0]||C[1]))&&(o+=T^w>=0?1:-1)}}return(a<-1e-6||a<1e-6&&ta<-1e-6)^1&o},ea=function(t,n,e,r){return function(i){var a,o,u,s=n(i),c=Wi(),h=n(c),f=!1,l={point:_,lineStart:v,lineEnd:y,polygonStart:function(){l.point=g,l.lineStart=b,l.lineEnd=x,o=[],a=[]},polygonEnd:function(){l.point=_,l.lineStart=v,l.lineEnd=y,o=p(o);var t=na(a,r);o.length?(f||(i.polygonStart(),f=!0),Gi(o,ia,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),o=a=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function _(n,e){t(n,e)&&i.point(n,e)}function d(t,n){s.point(t,n)}function v(){l.point=d,s.lineStart()}function y(){l.point=_,s.lineEnd()}function g(t,n){u.push([t,n]),h.point(t,n)}function b(){h.lineStart(),u=[]}function x(){g(u[0][0],u[0][1]),h.lineEnd();var t,n,e,r,s=h.clean(),l=c.result(),_=l.length;if(u.pop(),a.push(u),u=null,_)if(1&s){if((n=(e=l[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else _>1&&2&s&&l.push(l.pop().concat(l.shift())),o.push(l.filter(ra))}return l}};function ra(t){return t.length>1}function ia(t,n){return((t=t.x)[0]<0?t[1]-Ai-1e-6:Ai-t[1])-((n=n.x)[0]<0?n[1]-Ai-1e-6:Ai-n[1])}ea((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,o){var u=a>0?Si:-Si,s=Pi(a-e);Pi(s-Si)<1e-6?(t.point(e,r=(r+o)/2>0?Ai:-Ai),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(a,r),n=0):i!==u&&s>=Si&&(Pi(e-i)<1e-6&&(e-=1e-6*i),Pi(a-u)<1e-6&&(a-=1e-6*u),r=function(t,n,e,r){var i,a,o=ji(t-e);return Pi(o)>1e-6?Li((ji(n)*(a=Fi(r))*ji(e)-ji(r)*(i=Fi(n))*ji(t))/(i*a*o)):(n+r)/2}(e,r,a,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=a,r=o),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Ai,r.point(-Si,i),r.point(0,i),r.point(Si,i),r.point(Si,0),r.point(Si,-i),r.point(0,-i),r.point(-Si,-i),r.point(-Si,0),r.point(-Si,i);else if(Pi(t[0]-n[0])>1e-6){var a=t[0]<n[0]?Si:-Si;i=e*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(n[0],n[1])}),[-Si,-Ai]);ki();ki(),ki();function aa(t){this._context=t}aa.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Di)}},result:$i};ki();function oa(){this._string=[]}function ua(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}oa.prototype={_radius:4.5,_circle:ua(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=ua(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function sa(t){return function(n){var e=new ca;for(var r in t)e[r]=t[r];return e.stream=n,e}}function ca(){}ca.prototype={constructor:ca,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Fi(30*Ui);sa({point:function(t,n){this.stream.point(t*Ui,n*Ui)}});function ha(t){return function(n,e){var r=Fi(n),i=Fi(e),a=t(r*i);return[a*i*ji(n),a*ji(e)]}}function fa(t){return function(n,e){var r=qi(n*n+e*e),i=t(r),a=ji(i),o=Fi(i);return[Ri(n*a,r*o),Xi(r&&e*a/r)]}}var la=ha((function(t){return qi(2/(1+t))}));la.invert=fa((function(t){return 2*Xi(t/2)}));var _a=ha((function(t){return(t=Oi(t))&&t/ji(t)}));_a.invert=fa((function(t){return t}));function da(t,n){return[t,Yi(Hi((Ai+n)/2))]}da.invert=function(t,n){return[t,2*Li(zi(n))-Ai]};function pa(t,n){return[t,n]}pa.invert=pa;function va(t,n){var e=Fi(n),r=Fi(t)*e;return[e*ji(t)/r,ji(n)/r]}va.invert=fa(Li);function ya(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}ya.invert=function(t,n){var e,r=n,i=25;do{var a=r*r,o=a*a;r-=e=(r*(1.007226+a*(.015085+o*(.028874*a-.044475-.005916*o)))-n)/(1.007226+a*(.045255+o*(.259866*a-.311325-.005916*11*o)))}while(Pi(e)>1e-6&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function ga(t,n){return[Fi(n)*ji(t),ji(n)]}ga.invert=fa(Xi);function ba(t,n){var e=Fi(n),r=1+Fi(t)*e;return[e*ji(t)/r,ji(n)/r]}ba.invert=fa((function(t){return 2*Li(t)}));function xa(t,n){return[Yi(Hi((Ai+n)/2)),-t]}xa.invert=function(t,n){return[-n,2*Li(zi(t))-Ai]};function ma(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function wa(t,n){var e,r,i,a,o,u=new Na(t),s=+t.value&&(u.value=t.value),c=[u];for(null==n&&(n=Ma);e=c.pop();)if(s&&(e.value=+e.data.value),(i=n(e.data))&&(o=i.length))for(e.children=new Array(o),a=o-1;a>=0;--a)c.push(r=e.children[a]=new Na(i[a])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(Ta)}function Ma(t){return t.children}function ka(t){t.data=t.data.data}function Ta(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Na(t){this.data=t,this.depth=this.height=0,this.parent=null}Na.prototype=wa.prototype={constructor:Na,count:function(){return this.eachAfter(ma)},each:function(t){var n,e,r,i,a=this,o=[a];do{for(n=o.reverse(),o=[];a=n.pop();)if(t(a),e=a.children)for(r=0,i=e.length;r<i;++r)o.push(e[r])}while(o.length);return this},eachAfter:function(t){for(var n,e,r,i=this,a=[i],o=[];i=a.pop();)if(o.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)a.push(n[e]);for(;i=o.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return wa(this).eachBefore(ka)}};Array.prototype.slice;var Ca=function(t,n,e,r,i){for(var a,o=t.children,u=-1,s=o.length,c=t.value&&(r-n)/t.value;++u<s;)(a=o[u]).y0=e,a.y1=i,a.x0=n,a.x1=n+=a.value*c};function Sa(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Sa.prototype=Object.create(Na.prototype);var Aa=function(t,n,e,r,i){for(var a,o=t.children,u=-1,s=o.length,c=t.value&&(i-e)/t.value;++u<s;)(a=o[u]).x0=n,a.x1=r,a.y0=e,a.y1=e+=a.value*c},Ea=(1+Math.sqrt(5))/2;function Da(t,n,e,r,i,a){for(var o,u,s,c,h,f,l,_,d,p,v,y=[],g=n.children,b=0,x=0,m=g.length,w=n.value;b<m;){s=i-e,c=a-r;do{h=g[x++].value}while(!h&&x<m);for(f=l=h,v=h*h*(p=Math.max(c/s,s/c)/(w*t)),d=Math.max(l/v,v/f);x<m;++x){if(h+=u=g[x].value,u<f&&(f=u),u>l&&(l=u),v=h*h*p,(_=Math.max(l/v,v/f))>d){h-=u;break}d=_}y.push(o={value:h,dice:s<c,children:g.slice(b,x)}),o.dice?Ca(o,e,r,i,w?r+=c*h/w:a):Aa(o,e,r,w?e+=s*h/w:i,a),w-=h,b=x}return y}(function t(n){function e(t,e,r,i,a){Da(n,t,e,r,i,a)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(Ea),function t(n){function e(t,e,r,i,a){if((o=t._squarify)&&o.ratio===n)for(var o,u,s,c,h,f=-1,l=o.length,_=t.value;++f<l;){for(s=(u=o[f]).children,c=u.value=0,h=s.length;c<h;++c)u.value+=s[c].value;u.dice?Ca(u,e,r,i,r+=(a-r)*u.value/_):Aa(u,e,r,e+=(i-e)*u.value/_,a),_-=u.value}else t._squarify=o=Da(n,t,e,r,i,a),o.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Ea);var Ua=[].slice,Pa={};function La(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function Ra(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Fa(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Pa)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])za(t,n);else if(!t._data)throw n}}function Fa(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?za(t,e):(t._data[n]=r,t._waiting?Ra(t):Ya(t))))}}function za(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Ya(t)}function Ya(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}La.prototype=function(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new La(t)}.prototype={constructor:La,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Ua.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),Ra(this),this},abort:function(){return null==this._error&&za(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Ya(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Ya(this),this}};var ja=function(){return Math.random()},qa=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(ja),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var a;if(null!=r)a=r,r=null;else do{r=2*n()-1,a=2*n()-1,i=r*r+a*a}while(!i||i>1);return t+e*a*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(ja)),Ha=(function t(n){function e(){var t=qa.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(ja),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(ja)),Oa=(function t(n){function e(t){var e=Ha.source(n)(t);return function(){return e()/t}}return e.source=t,e}(ja),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(ja),function(t,n){var e,r,i,a,o=E("beforesend","progress","load","error"),u=jr(),s=new XMLHttpRequest,c=null,h=null,f=0;function l(t){var n,r=s.status;if(!r&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(s)||r>=200&&r<300||304===r){if(i)try{n=i.call(e,s)}catch(t){return void o.call("error",e,t)}else n=s;o.call("load",e,n)}else o.call("error",e,t)}if("undefined"==typeof XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=s.ontimeout=l:s.onreadystatechange=function(t){s.readyState>3&&l(t)},s.onprogress=function(t){o.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?u.get(t):(null==n?u.remove(t):u.set(t,n+""),e)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",e):r},responseType:function(t){return arguments.length?(a=t,e):a},timeout:function(t){return arguments.length?(f=+t,e):f},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",e)},password:function(t){return arguments.length<1?h:(h=null==t?null:t+"",e)},response:function(t){return i=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,i,l){return s.open(n,t,!0,c,h),null==r||u.has("accept")||u.set("accept",r+",*/*"),s.setRequestHeader&&u.each((function(t,n){s.setRequestHeader(n,t)})),null!=r&&s.overrideMimeType&&s.overrideMimeType(r),null!=a&&(s.responseType=a),f>0&&(s.timeout=f),null==l&&"function"==typeof i&&(l=i,i=null),null!=l&&1===l.length&&(l=function(t){return function(n,e){t(null==n?e:null)}}(l)),null!=l&&e.on("error",l).on("load",(function(t){l(null,t)})),o.call("beforesend",e,s),s.send(null==i?null:i),e},abort:function(){return s.abort(),e},on:function(){var t=o.on.apply(o,arguments);return t===o?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e});var Xa=function(t,n){return function(e,r){var i=Oa(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},$a=(Xa("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Xa("application/json",(function(t){return JSON.parse(t.responseText)})),Xa("text/plain",(function(t){return t.responseText})),Xa("application/xml",(function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n})),function(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var a=Oa(e).mimeType(t);return a.row=function(t){return arguments.length?a.response(Ia(n,r=t)):r},a.row(r),i?a.get(i):a}});function Ia(t,n){return function(e){return t(e.responseText,n)}}$a("text/csv",ti),$a("text/tab-separated-values",ei);var Va=Array.prototype,Ba=Va.map,Za=Va.slice;var Wa=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},Qa=function(t){return function(){return t}},Ja=function(t){return+t},Ga=[0,1];function Ka(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Qa(n)}function to(t,n,e,r){var i=t[0],a=t[1],o=n[0],u=n[1];return a<i?(i=e(a,i),o=r(u,o)):(i=e(i,a),o=r(o,u)),function(t){return o(i(t))}}function no(t,n,e,r){var i=Math.min(t.length,n.length)-1,a=new Array(i),o=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++s<i;)a[s]=e(t[s],t[s+1]),o[s]=r(n[s],n[s+1]);return function(n){var e=u(t,n,1,i)-1;return o[e](a[e](n))}}function eo(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function ro(t,n){var e,r,i,a=Ga,o=Ga,u=Zn,s=!1;function c(){return e=Math.min(a.length,o.length)>2?no:to,r=i=null,h}function h(n){return(r||(r=e(a,o,s?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,u)))(+n)}return h.invert=function(t){return(i||(i=e(o,a,Ka,s?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},h.domain=function(t){return arguments.length?(a=Ba.call(t,Ja),c()):a.slice()},h.range=function(t){return arguments.length?(o=Za.call(t),c()):o.slice()},h.rangeRound=function(t){return o=Za.call(t),u=Wa,c()},h.clamp=function(t){return arguments.length?(s=!!t,c()):s},h.interpolate=function(t){return arguments.length?(u=t,c()):u},c()}var io=function(t,n,e){var r,i=t[0],a=t[t.length-1],o=d(i,a,null==n?10:n);switch((e=yi(null==e?",f":e)).type){case"s":var u=Math.max(Math.abs(i),Math.abs(a));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(_i(n)/3)))-_i(Math.abs(t)))}(o,u))||(e.precision=r),mi(e,u);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,_i(n)-_i(t))+1}(o,Math.max(Math.abs(i),Math.abs(a))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-_i(Math.abs(t)))}(o))||(e.precision=r-2*("%"===e.type))}return xi(e)};function ao(t){var n=t.domain;return t.ticks=function(t){var e=n();return l(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return io(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),a=0,o=i.length-1,u=i[a],s=i[o];return s<u&&(r=u,u=s,s=r,r=a,a=o,o=r),(r=_(u,s,e))>0?r=_(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=_(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[a]=Math.floor(u/r)*r,i[o]=Math.ceil(s/r)*r,n(i)):r<0&&(i[a]=Math.ceil(u*r)/r,i[o]=Math.floor(s*r)/r,n(i)),t},t}function oo(){var t=ro(Ka,Hn);return t.copy=function(){return eo(t,oo())},ao(t)}var uo=function(t,n){var e,r=0,i=(t=t.slice()).length-1,a=t[r],o=t[i];return o<a&&(e=r,r=i,i=e,e=a,a=o,o=e),t[r]=n.floor(a),t[i]=n.ceil(o),t};function so(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Qa(n)}function co(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function ho(t){return isFinite(t)?+("1e"+t):t<0?0:t}function fo(t){return 10===t?ho:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function lo(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function _o(t){return function(n){return-t(-n)}}function po(){var t=ro(so,co).domain([1,10]),n=t.domain,e=10,r=lo(10),i=fo(10);function a(){return r=lo(e),i=fo(e),n()[0]<0&&(r=_o(r),i=_o(i)),t}return t.base=function(t){return arguments.length?(e=+t,a()):e},t.domain=function(t){return arguments.length?(n(t),a()):n()},t.ticks=function(t){var a,o=n(),u=o[0],s=o[o.length-1];(a=s<u)&&(_=u,u=s,s=_);var c,h,f,_=r(u),d=r(s),p=null==t?10:+t,v=[];if(!(e%1)&&d-_<p){if(_=Math.round(_)-1,d=Math.round(d)+1,u>0){for(;_<d;++_)for(h=1,c=i(_);h<e;++h)if(!((f=c*h)<u)){if(f>s)break;v.push(f)}}else for(;_<d;++_)for(h=e-1,c=i(_);h>=1;--h)if(!((f=c*h)<u)){if(f>s)break;v.push(f)}}else v=l(_,d,Math.min(d-_,p)).map(i);return a?v.reverse():v},t.tickFormat=function(n,a){if(null==a&&(a=10===e?".0e":","),"function"!=typeof a&&(a=xi(a)),n===1/0)return a;null==n&&(n=10);var o=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=o?a(t):""}},t.nice=function(){return n(uo(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return eo(t,po().base(e))},t}var vo=new Date,yo=new Date;function go(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,a){var o,u=[];if(e=i.ceil(e),a=null==a?1:Math.floor(a),!(e<r&&a>0))return u;do{u.push(o=new Date(+e)),n(e,a),t(e)}while(o<e&&e<r);return u},i.filter=function(e){return go((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return vo.setTime(+n),yo.setTime(+r),t(vo),t(yo),Math.floor(e(vo,yo))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var bo=go((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));bo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?go((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var xo=bo,mo=(bo.range,go((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),wo=mo;mo.range;function Mo(t){return go((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var ko=Mo(0),To=Mo(1),No=Mo(2),Co=Mo(3),So=Mo(4),Ao=Mo(5),Eo=Mo(6),Do=(ko.range,To.range,No.range,Co.range,So.range,Ao.range,Eo.range,go((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Uo=Do,Po=(Do.range,go((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Lo=Po,Ro=(Po.range,go((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Fo=Ro,zo=(Ro.range,go((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Yo=zo,jo=(zo.range,go((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));jo.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?go((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):jo:null};var qo=jo;jo.range;function Ho(t){return go((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var Oo=Ho(0),Xo=Ho(1),$o=Ho(2),Io=Ho(3),Vo=Ho(4),Bo=Ho(5),Zo=Ho(6),Wo=(Oo.range,Xo.range,$o.range,Io.range,Vo.range,Bo.range,Zo.range,go((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Qo=Wo,Jo=(Wo.range,go((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Jo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?go((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Go=Jo;Jo.range;function Ko(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function tu(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function nu(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var eu,ru,iu,au,ou={"-":"",_:" ",0:"0"},uu=/^\s*\d+/,su=/^%/,cu=/[\\^$*+?|[\]().{}]/g;function hu(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<e?new Array(e-a+1).join(n)+i:i)}function fu(t){return t.replace(cu,"\\$&")}function lu(t){return new RegExp("^(?:"+t.map(fu).join("|")+")","i")}function _u(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function du(t,n,e){var r=uu.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function pu(t,n,e){var r=uu.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function vu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function yu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function gu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function bu(t,n,e){var r=uu.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function xu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function mu(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function wu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Mu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ku(t,n,e){var r=uu.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Tu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Nu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Cu(t,n,e){var r=uu.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Su(t,n,e){var r=uu.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Au(t,n,e){var r=uu.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Eu(t,n,e){var r=su.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Du(t,n,e){var r=uu.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Uu(t,n,e){var r=uu.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Pu(t,n){return hu(t.getDate(),n,2)}function Lu(t,n){return hu(t.getHours(),n,2)}function Ru(t,n){return hu(t.getHours()%12||12,n,2)}function Fu(t,n){return hu(1+Uo.count(xo(t),t),n,3)}function zu(t,n){return hu(t.getMilliseconds(),n,3)}function Yu(t,n){return zu(t,n)+"000"}function ju(t,n){return hu(t.getMonth()+1,n,2)}function qu(t,n){return hu(t.getMinutes(),n,2)}function Hu(t,n){return hu(t.getSeconds(),n,2)}function Ou(t){var n=t.getDay();return 0===n?7:n}function Xu(t,n){return hu(ko.count(xo(t),t),n,2)}function $u(t,n){var e=t.getDay();return t=e>=4||0===e?So(t):So.ceil(t),hu(So.count(xo(t),t)+(4===xo(t).getDay()),n,2)}function Iu(t){return t.getDay()}function Vu(t,n){return hu(To.count(xo(t),t),n,2)}function Bu(t,n){return hu(t.getFullYear()%100,n,2)}function Zu(t,n){return hu(t.getFullYear()%1e4,n,4)}function Wu(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+hu(n/60|0,"0",2)+hu(n%60,"0",2)}function Qu(t,n){return hu(t.getUTCDate(),n,2)}function Ju(t,n){return hu(t.getUTCHours(),n,2)}function Gu(t,n){return hu(t.getUTCHours()%12||12,n,2)}function Ku(t,n){return hu(1+Qo.count(Go(t),t),n,3)}function ts(t,n){return hu(t.getUTCMilliseconds(),n,3)}function ns(t,n){return ts(t,n)+"000"}function es(t,n){return hu(t.getUTCMonth()+1,n,2)}function rs(t,n){return hu(t.getUTCMinutes(),n,2)}function is(t,n){return hu(t.getUTCSeconds(),n,2)}function as(t){var n=t.getUTCDay();return 0===n?7:n}function os(t,n){return hu(Oo.count(Go(t),t),n,2)}function us(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Vo(t):Vo.ceil(t),hu(Vo.count(Go(t),t)+(4===Go(t).getUTCDay()),n,2)}function ss(t){return t.getUTCDay()}function cs(t,n){return hu(Xo.count(Go(t),t),n,2)}function hs(t,n){return hu(t.getUTCFullYear()%100,n,2)}function fs(t,n){return hu(t.getUTCFullYear()%1e4,n,4)}function ls(){return"+0000"}function _s(){return"%"}function ds(t){return+t}function ps(t){return Math.floor(+t/1e3)}!function(t){eu=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,u=t.months,s=t.shortMonths,c=lu(i),h=_u(i),f=lu(a),l=_u(a),_=lu(o),d=_u(o),p=lu(u),v=_u(u),y=lu(s),g=_u(s),b={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Pu,e:Pu,f:Yu,H:Lu,I:Ru,j:Fu,L:zu,m:ju,M:qu,p:function(t){return i[+(t.getHours()>=12)]},Q:ds,s:ps,S:Hu,u:Ou,U:Xu,V:$u,w:Iu,W:Vu,x:null,X:null,y:Bu,Y:Zu,Z:Wu,"%":_s},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Qu,e:Qu,f:ns,H:Ju,I:Gu,j:Ku,L:ts,m:es,M:rs,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:ds,s:ps,S:is,u:as,U:os,V:us,w:ss,W:cs,x:null,X:null,y:hs,Y:fs,Z:ls,"%":_s},m={a:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=l[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return k(t,n,e,r)},d:Mu,e:Mu,f:Au,H:Tu,I:Tu,j:ku,L:Su,m:wu,M:Nu,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=h[r[0].toLowerCase()],e+r[0].length):-1},Q:Du,s:Uu,S:Cu,u:pu,U:vu,V:yu,w:du,W:gu,x:function(t,n,r){return k(t,e,n,r)},X:function(t,n,e){return k(t,r,n,e)},y:xu,Y:bu,Z:mu,"%":Eu};function w(t,n){return function(e){var r,i,a,o=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(o.push(t.slice(s,u)),null!=(i=ou[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(a=n[r])&&(r=a(e,i)),o.push(r),s=u+1);return o.push(t.slice(s,u)),o.join("")}}function M(t,n){return function(e){var r,i,a=nu(1900);if(k(a,t,e+="",0)!=e.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=tu(nu(a.y))).getUTCDay(),r=i>4||0===i?Xo.ceil(r):Xo(r),r=Qo.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=n(nu(a.y))).getDay(),r=i>4||0===i?To.ceil(r):To(r),r=Uo.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?tu(nu(a.y)).getUTCDay():n(nu(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,tu(a)):n(a)}}function k(t,n,e,r){for(var i,a,o=0,u=n.length,s=e.length;o<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(a=m[i in ou?n.charAt(o++):i])||(r=a(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return(b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Ko);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,tu);return n.toString=function(){return t},n}})}(t),ru=eu.format,eu.parse,iu=eu.utcFormat,au=eu.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||iu("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||au("%Y-%m-%dT%H:%M:%S.%LZ");function vs(t){return new Date(t)}function ys(t){return t instanceof Date?+t:+new Date(+t)}function gs(t,n,e,r,a,o,u,s,c){var h=ro(Ka,Hn),f=h.invert,l=h.domain,_=c(".%L"),p=c(":%S"),v=c("%I:%M"),y=c("%I %p"),g=c("%a %d"),b=c("%b %d"),x=c("%B"),m=c("%Y"),w=[[u,1,1e3],[u,5,5e3],[u,15,15e3],[u,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[a,1,36e5],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function M(i){return(u(i)<i?_:o(i)<i?p:a(i)<i?v:r(i)<i?y:n(i)<i?e(i)<i?g:b:t(i)<i?x:m)(i)}function k(n,e,r,a){if(null==n&&(n=10),"number"==typeof n){var o=Math.abs(r-e)/n,u=i((function(t){return t[2]})).right(w,o);u===w.length?(a=d(e/31536e6,r/31536e6,n),n=t):u?(a=(u=w[o/w[u-1][2]<w[u][2]/o?u-1:u])[1],n=u[0]):(a=Math.max(d(e,r,n),1),n=s)}return null==a?n:n.every(a)}return h.invert=function(t){return new Date(f(t))},h.domain=function(t){return arguments.length?l(Ba.call(t,ys)):l().map(vs)},h.ticks=function(t,n){var e,r=l(),i=r[0],a=r[r.length-1],o=a<i;return o&&(e=i,i=a,a=e),e=(e=k(t,i,a,n))?e.range(i,a+1):[],o?e.reverse():e},h.tickFormat=function(t,n){return null==n?M:c(n)},h.nice=function(t,n){var e=l();return(t=k(t,e[0],e[e.length-1],n))?l(uo(e,t)):h},h.copy=function(){return eo(h,gs(t,n,e,r,a,o,u,s,c))},h}var bs=go((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),xs=(bs.range,go((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),ms=(xs.range,go((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()}))),ws=(ms.range,function(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))}),Ms=(ws("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ws("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),ws("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),ws("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Math.PI/180),ks=180/Math.PI,Ts=-.29227,Ns=-1.7884503806,Cs=3.5172982438,Ss=-.6557636667999999;function As(t){if(t instanceof Ds)return new Ds(t.h,t.s,t.l,t.opacity);t instanceof wn||(t=xn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Ss*r+Ns*n-Cs*e)/(Ss+Ns-Cs),a=r-i,o=(1.97294*(e-i)-Ts*a)/-.90649,u=Math.sqrt(o*o+a*a)/(1.97294*i*(1-i)),s=u?Math.atan2(o,a)*ks-120:NaN;return new Ds(s<0?s+360:s,u,i,t.opacity)}function Es(t,n,e,r){return 1===arguments.length?As(t):new Ds(t,n,e,null==r?1:r)}function Ds(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Us(t){return function n(e){function r(n,r){var i=t((n=Es(n)).h,(r=Es(r)).h),a=Ln(n.s,r.s),o=Ln(n.l,r.l),u=Ln(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=a(t),n.l=o(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}tn(Ds,Es,nn(en,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ds(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ds(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Ms,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new wn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(Ts*r+-.90649*i)),255*(n+e*(1.97294*r)),this.opacity)}}));Us((function(t,n){var e=n-t;return e?Un(t,e>180||e<-180?e-360*Math.round(e/360):e):Dn(isNaN(t)?n:t)}));var Ps=Us(Ln);Ps(Es(300,.5,0),Es(-240,.5,1)),Ps(Es(-100,.75,.35),Es(80,1.5,.8)),Ps(Es(260,.75,.35),Es(80,1.5,.8)),Es();function Ls(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}Ls(ws("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Ls(ws("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ls(ws("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ls(ws("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Rs=function(t){return function(){return t}},Fs=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,Math.PI),zs=2*Fs;function Ys(t){this._context=t}Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var js=function(t){return new Ys(t)};function qs(t){return t[0]}function Hs(t){return t[1]}var Os=function(){var t=qs,n=Hs,e=Rs(!0),r=null,i=js,a=null;function o(o){var u,s,c,h=o.length,f=!1;for(null==r&&(a=i(c=Fr())),u=0;u<=h;++u)!(u<h&&e(s=o[u],u,o))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+t(s,u,o),+n(s,u,o));if(c)return a=null,c+""||null}return o.x=function(n){return arguments.length?(t="function"==typeof n?n:Rs(+n),o):t},o.y=function(t){return arguments.length?(n="function"==typeof t?t:Rs(+t),o):n},o.defined=function(t){return arguments.length?(e="function"==typeof t?t:Rs(!!t),o):e},o.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),o):r},o};$s(js);function Xs(t){this._curve=t}function $s(t){function n(n){return new Xs(t(n))}return n._curve=t,n}Xs.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Is=Math.sin(Fs/10)/Math.sin(7*Fs/10),Vs=(Math.sin(zs/10),Math.cos(zs/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Bs(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Zs(t){this._context=t}Zs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Bs(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Bs(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ws(t){this._context=t}Ws.prototype={areaStart:Vs,areaEnd:Vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Bs(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Qs(t){this._context=t}Qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Bs(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Js(t,n){this._basis=new Zs(t),this._beta=n}Js.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],a=n[0],o=t[e]-i,u=n[e]-a,s=-1;++s<=e;)r=s/e,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*o),this._beta*n[s]+(1-this._beta)*(a+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Zs(t):new Js(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function Gs(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Ks(t,n){this._context=t,this._k=(1-n)/6}Ks.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Gs(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Gs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Ks(t,n)}return e.tension=function(n){return t(+n)},e})(0);function tc(t,n){this._context=t,this._k=(1-n)/6}tc.prototype={areaStart:Vs,areaEnd:Vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Gs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new tc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function nc(t,n){this._context=t,this._k=(1-n)/6}nc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Gs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new nc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function ec(t,n,e){var r=t._x1,i=t._y1,a=t._x2,o=t._y2;if(t._l01_a>1e-12){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>1e-12){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,h=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*c+t._x1*t._l23_2a-n*t._l12_2a)/h,o=(o*c+t._y1*t._l23_2a-e*t._l12_2a)/h}t._context.bezierCurveTo(r,i,a,o,t._x2,t._y2)}function rc(t,n){this._context=t,this._alpha=n}rc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:ec(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new rc(t,n):new Ks(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function ic(t,n){this._context=t,this._alpha=n}ic.prototype={areaStart:Vs,areaEnd:Vs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:ec(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new ic(t,n):new tc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function ac(t,n){this._context=t,this._alpha=n}ac.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ec(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new ac(t,n):new nc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function oc(t){this._context=t}oc.prototype={areaStart:Vs,areaEnd:Vs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function uc(t){return t<0?-1:1}function sc(t,n,e){var r=t._x1-t._x0,i=n-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),o=(e-t._y1)/(i||r<0&&-0),u=(a*i+o*r)/(r+i);return(uc(a)+uc(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(u))||0}function cc(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function hc(t,n,e){var r=t._x0,i=t._y0,a=t._x1,o=t._y1,u=(a-r)/3;t._context.bezierCurveTo(r+u,i+u*n,a-u,o-u*e,a,o)}function fc(t){this._context=t}function lc(t){this._context=new _c(t)}function _c(t){this._context=t}function dc(t){this._context=t}function pc(t){var n,e,r=t.length-1,i=new Array(r),a=new Array(r),o=new Array(r);for(i[0]=0,a[0]=2,o[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,a[n]=4,o[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,a[r-1]=7,o[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/a[n-1],a[n]-=e,o[n]-=e*o[n-1];for(i[r-1]=o[r-1]/a[r-1],n=r-2;n>=0;--n)i[n]=(o[n]-i[n+1])/a[n];for(a[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)a[n]=2*t[n+1]-i[n+1];return[i,a]}fc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:hc(this,this._t0,cc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,hc(this,cc(this,e=sc(this,t,n)),e);break;default:hc(this,this._t0,e=sc(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(lc.prototype=Object.create(fc.prototype)).point=function(t,n){fc.prototype.point.call(this,n,t)},_c.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,a){this._context.bezierCurveTo(n,t,r,e,a,i)}},dc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=pc(t),i=pc(n),a=0,o=1;o<e;++a,++o)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[o],n[o]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function vc(t,n){this._context=t,this._t=n}vc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function yc(){this._=null}function gc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function bc(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function xc(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function mc(t){for(;t.L;)t=t.L;return t}yc.prototype={constructor:yc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=mc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(bc(this,e),e=(t=e).U),e.C=!1,r.C=!0,xc(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(xc(this,e),e=(t=e).U),e.C=!1,r.C=!0,bc(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,a=t.L,o=t.R;if(e=a?o?mc(o):a:o,i?i.L===t?i.L=e:i.R=e:this._=e,a&&o?(r=e.C,e.C=t.C,e.L=a,a.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,bc(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,xc(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,bc(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,xc(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,bc(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,xc(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var wc=yc;function Mc(t,n,e,r){var i=[null,null],a=Bc.push(i)-1;return i.left=t,i.right=n,e&&Tc(i,t,n,e),r&&Tc(i,n,t,r),Ic[t.index].halfedges.push(a),Ic[n.index].halfedges.push(a),i}function kc(t,n,e){var r=[n,e];return r.left=t,r}function Tc(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Nc(t,n,e,r,i){var a,o=t[0],u=t[1],s=o[0],c=o[1],h=0,f=1,l=u[0]-s,_=u[1]-c;if(a=n-s,l||!(a>0)){if(a/=l,l<0){if(a<h)return;a<f&&(f=a)}else if(l>0){if(a>f)return;a>h&&(h=a)}if(a=r-s,l||!(a<0)){if(a/=l,l<0){if(a>f)return;a>h&&(h=a)}else if(l>0){if(a<h)return;a<f&&(f=a)}if(a=e-c,_||!(a>0)){if(a/=_,_<0){if(a<h)return;a<f&&(f=a)}else if(_>0){if(a>f)return;a>h&&(h=a)}if(a=i-c,_||!(a<0)){if(a/=_,_<0){if(a>f)return;a>h&&(h=a)}else if(_>0){if(a<h)return;a<f&&(f=a)}return!(h>0||f<1)||(h>0&&(t[0]=[s+h*l,c+h*_]),f<1&&(t[1]=[s+f*l,c+f*_]),!0)}}}}}function Cc(t,n,e,r,i){var a=t[1];if(a)return!0;var o,u,s=t[0],c=t.left,h=t.right,f=c[0],l=c[1],_=h[0],d=h[1],p=(f+_)/2,v=(l+d)/2;if(d===l){if(p<n||p>=r)return;if(f>_){if(s){if(s[1]>=i)return}else s=[p,e];a=[p,i]}else{if(s){if(s[1]<e)return}else s=[p,i];a=[p,e]}}else if(u=v-(o=(f-_)/(d-l))*p,o<-1||o>1)if(f>_){if(s){if(s[1]>=i)return}else s=[(e-u)/o,e];a=[(i-u)/o,i]}else{if(s){if(s[1]<e)return}else s=[(i-u)/o,i];a=[(e-u)/o,e]}else if(l<d){if(s){if(s[0]>=r)return}else s=[n,o*n+u];a=[r,o*r+u]}else{if(s){if(s[0]<n)return}else s=[r,o*r+u];a=[n,o*n+u]}return t[0]=s,t[1]=a,!0}function Sc(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Ac(t,n){return n[+(n.left!==t.site)]}function Ec(t,n){return n[+(n.left===t.site)]}var Dc,Uc=[];function Pc(){gc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Lc(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,a=e.site;if(r!==a){var o=i[0],u=i[1],s=r[0]-o,c=r[1]-u,h=a[0]-o,f=a[1]-u,l=2*(s*f-c*h);if(!(l>=-Wc)){var _=s*s+c*c,d=h*h+f*f,p=(f*_-c*d)/l,v=(s*d-h*_)/l,y=Uc.pop()||new Pc;y.arc=t,y.site=i,y.x=p+o,y.y=(y.cy=v+u)+Math.sqrt(p*p+v*v),t.circle=y;for(var g=null,b=Vc._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){g=b.P;break}b=b.L}else{if(!b.R){g=b;break}b=b.R}Vc.insert(g,y),g||(Dc=y)}}}}function Rc(t){var n=t.circle;n&&(n.P||(Dc=n.N),Vc.remove(n),Uc.push(n),gc(n),t.circle=null)}var Fc=[];function zc(){gc(this),this.edge=this.site=this.circle=null}function Yc(t){var n=Fc.pop()||new zc;return n.site=t,n}function jc(t){Rc(t),$c.remove(t),Fc.push(t),gc(t)}function qc(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],a=t.P,o=t.N,u=[t];jc(t);for(var s=a;s.circle&&Math.abs(e-s.circle.x)<Zc&&Math.abs(r-s.circle.cy)<Zc;)a=s.P,u.unshift(s),jc(s),s=a;u.unshift(s),Rc(s);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Zc&&Math.abs(r-c.circle.cy)<Zc;)o=c.N,u.push(c),jc(c),c=o;u.push(c),Rc(c);var h,f=u.length;for(h=1;h<f;++h)c=u[h],s=u[h-1],Tc(c.edge,s.site,c.site,i);s=u[0],(c=u[f-1]).edge=Mc(s.site,c.site,null,i),Lc(s),Lc(c)}function Hc(t){for(var n,e,r,i,a=t[0],o=t[1],u=$c._;u;)if((r=Oc(u,o)-a)>Zc)u=u.L;else{if(!((i=a-Xc(u,o))>Zc)){r>-Zc?(n=u.P,e=u):i>-Zc?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){Ic[t.index]={site:t,halfedges:[]}}(t);var s=Yc(t);if($c.insert(n,s),n||e){if(n===e)return Rc(n),e=Yc(n.site),$c.insert(s,e),s.edge=e.edge=Mc(n.site,s.site),Lc(n),void Lc(e);if(e){Rc(n),Rc(e);var c=n.site,h=c[0],f=c[1],l=t[0]-h,_=t[1]-f,d=e.site,p=d[0]-h,v=d[1]-f,y=2*(l*v-_*p),g=l*l+_*_,b=p*p+v*v,x=[(v*g-_*b)/y+h,(l*b-p*g)/y+f];Tc(e.edge,c,d,x),s.edge=Mc(c,t,null,x),e.edge=Mc(t,d,null,x),Lc(n),Lc(e)}else s.edge=Mc(n.site,s.site)}}function Oc(t,n){var e=t.site,r=e[0],i=e[1],a=i-n;if(!a)return r;var o=t.P;if(!o)return-1/0;var u=(e=o.site)[0],s=e[1],c=s-n;if(!c)return u;var h=u-r,f=1/a-1/c,l=h/c;return f?(-l+Math.sqrt(l*l-2*f*(h*h/(-2*c)-s+c/2+i-a/2)))/f+r:(r+u)/2}function Xc(t,n){var e=t.N;if(e)return Oc(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var $c,Ic,Vc,Bc,Zc=1e-6,Wc=1e-12;function Qc(t,n){return n[1]-t[1]||n[0]-t[0]}function Jc(t,n){var e,r,i,a=t.sort(Qc).pop();for(Bc=[],Ic=new Array(t.length),$c=new wc,Vc=new wc;;)if(i=Dc,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===e&&a[1]===r||(Hc(a),e=a[0],r=a[1]),a=t.pop();else{if(!i)break;qc(i.arc)}if(function(){for(var t,n,e,r,i=0,a=Ic.length;i<a;++i)if((t=Ic[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),u=new Array(r);for(e=0;e<r;++e)o[e]=e,u[e]=Sc(t,Bc[n[e]]);for(o.sort((function(t,n){return u[n]-u[t]})),e=0;e<r;++e)u[e]=n[o[e]];for(e=0;e<r;++e)n[e]=u[e]}}(),n){var o=+n[0][0],u=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,a=Bc.length;a--;)Cc(i=Bc[a],t,n,e,r)&&Nc(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Zc||Math.abs(i[0][1]-i[1][1])>Zc)||delete Bc[a]}(o,u,s,c),function(t,n,e,r){var i,a,o,u,s,c,h,f,l,_,d,p,v=Ic.length,y=!0;for(i=0;i<v;++i)if(a=Ic[i]){for(o=a.site,u=(s=a.halfedges).length;u--;)Bc[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)d=(_=Ec(a,Bc[s[u]]))[0],p=_[1],f=(h=Ac(a,Bc[s[++u%c]]))[0],l=h[1],(Math.abs(d-f)>Zc||Math.abs(p-l)>Zc)&&(s.splice(u,0,Bc.push(kc(o,_,Math.abs(d-t)<Zc&&r-p>Zc?[t,Math.abs(f-t)<Zc?l:r]:Math.abs(p-r)<Zc&&e-d>Zc?[Math.abs(l-r)<Zc?f:e,r]:Math.abs(d-e)<Zc&&p-n>Zc?[e,Math.abs(f-e)<Zc?l:n]:Math.abs(p-n)<Zc&&d-t>Zc?[Math.abs(l-n)<Zc?f:t,n]:null))-1),++c);c&&(y=!1)}if(y){var g,b,x,m=1/0;for(i=0,y=null;i<v;++i)(a=Ic[i])&&(x=(g=(o=a.site)[0]-t)*g+(b=o[1]-n)*b)<m&&(m=x,y=a);if(y){var w=[t,n],M=[t,r],k=[e,r],T=[e,n];y.halfedges.push(Bc.push(kc(o=y.site,w,M))-1,Bc.push(kc(o,M,k))-1,Bc.push(kc(o,k,T))-1,Bc.push(kc(o,T,w))-1)}}for(i=0;i<v;++i)(a=Ic[i])&&(a.halfedges.length||delete Ic[i])}(o,u,s,c)}this.edges=Bc,this.cells=Ic,$c=Vc=Bc=Ic=null}Jc.prototype={constructor:Jc,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Ac(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(a=(i=e.halfedges).length)for(var i,a,o,u,s,c,h=e.site,f=-1,l=n[i[a-1]],_=l.left===h?l.right:l.left;++f<a;)o=_,_=(l=n[i[f]]).left===h?l.right:l.left,o&&_&&r<o.index&&r<_.index&&(s=o,c=_,((u=h)[0]-c[0])*(s[1]-u[1])-(u[0]-s[0])*(c[1]-u[1])<0)&&t.push([h.data,o.data,_.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,a=this,o=a._found||0,u=a.cells.length;!(i=a.cells[o]);)if(++o>=u)return null;var s=t-i.site[0],c=n-i.site[1],h=s*s+c*c;do{i=a.cells[r=o],o=null,i.halfedges.forEach((function(e){var r=a.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var s=t-u[0],c=n-u[1],f=s*s+c*c;f<h&&(h=f,o=u.index)}}))}while(null!==o);return a._found=r,null==e||h<=e*e?i.site:null}};Math.SQRT2;function Gc(t,n,e){this.k=t,this.x=n,this.y=e}Gc.prototype={constructor:Gc,scale:function(t){return 1===t?this:new Gc(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Gc(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Gc(1,0,0);Gc.prototype;var Kc="\n text {\n     font-size: 12px;\n     font-family: Lato;\n }\n\n#play-button {\n    position: absolute;\n    top: 140px;\n    left: 50px;\n    background: #f08080;\n    padding-right: 26px;\n    border-radius: 3px;\n    border: none;\n    color: white;\n    margin: 0;\n    padding: 0 12px;\n    width: 60px;\n    cursor: pointer;\n    height: 30px;\n  }\n\n  #play-button:hover {\n    background-color: #696969;\n  }    \n  \n  .ticks {\n    font-size: 10px;\n  }\n\n  .track,\n  .track-inset,\n  .track-overlay {\n    stroke-linecap: round;\n  }\n\n  select {\n      margin-left: 10px;\n  }\n\n  .padded {\n      margin-left: 40px;\n  }\n\n  .track {\n    stroke: #000;\n    stroke-opacity: 0.3;\n    stroke-width: 10px;\n  }\n\n  .track-inset {\n    stroke: #dcdcdc;\n    stroke-width: 8px;\n  }\n\n  .track-overlay {\n    pointer-events: stroke;\n    stroke-width: 50px;\n    stroke: transparent;\n    cursor: crosshair;\n  }\n\n  .handle {\n    fill: #fff;\n    stroke: #000;\n    stroke-opacity: 0.5;\n    stroke-width: 1.25px;\n  }\n\n",th=document.head||document.getElementsByTagName("head")[0],nh=document.createElement("style");function eh(t){const{Date:n}=t;return new Date(n)}th.appendChild(nh),nh.type="text/css",nh.styleSheet?nh.styleSheet.cssText=Kc:nh.appendChild(document.createTextNode(Kc));const rh=Zt("svg#svg-canvas"),ih=+rh.attr("width"),ah=+rh.attr("height");var oh=function(t){const n=t[0],e=t[t.length-1],[r,i]=[eh(n),eh(e)];let a="confirmed";rh.append("defs").append("clipPath").attr("id","cut-off").append("rect").attr("x",60).attr("width",ih).attr("y",10).attr("height",ah-70);const o=rh.append("g");let u=0,s=ih-60;var c=rh.append("g").attr("transform",`translate(0, ${ah-50})`).attr("class","slider"),h=gs(xo,wo,ko,Uo,Lo,Fo,Yo,qo,ru).domain([new Date(2e3,0,1),new Date(2e3,0,2)]).domain([r,i]).range([60,s]).clamp(!0);c.append("line").attr("class","track").attr("x1",h.range()[0]).attr("x2",h.range()[1]).select((function(){return this.parentNode.appendChild(this.cloneNode(!0))})).attr("class","track-inset").select((function(){return this.parentNode.appendChild(this.cloneNode(!0))})).attr("class","track-overlay").call(function(){var t,n,e,r,i=Ir,a=Vr,o=Br,u=Zr,s={},c=E("start","drag","end"),h=0,f=0;function l(t){t.on("mousedown.drag",_).filter(u).on("touchstart.drag",v).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(){if(!r&&i.apply(this,arguments)){var o=b("mouse",a.apply(this,arguments),K,this,arguments);o&&(Zt($.view).on("mousemove.drag",d,!0).on("mouseup.drag",p,!0),Gt($.view),Qt(),e=!1,t=$.clientX,n=$.clientY,o("start"))}}function d(){if(Jt(),!e){var r=$.clientX-t,i=$.clientY-n;e=r*r+i*i>f}s.mouse("drag")}function p(){Zt($.view).on("mousemove.drag mouseup.drag",null),Kt($.view,e),Jt(),s.mouse("end")}function v(){if(i.apply(this,arguments)){var t,n,e=$.changedTouches,r=a.apply(this,arguments),o=e.length;for(t=0;t<o;++t)(n=b(e[t].identifier,r,Wt,this,arguments))&&(Qt(),n("start"))}}function y(){var t,n,e=$.changedTouches,r=e.length;for(t=0;t<r;++t)(n=s[e[t].identifier])&&(Jt(),n("drag"))}function g(){var t,n,e=$.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=s[e[t].identifier])&&(Qt(),n("end"))}function b(t,n,e,r,i){var a,u,f,_=e(n,t),d=c.copy();if(Q(new $r(l,"beforestart",a,t,h,_[0],_[1],0,0,d),(function(){return null!=($.subject=a=o.apply(r,i))&&(u=a.x-_[0]||0,f=a.y-_[1]||0,!0)})))return function o(c){var p,v=_;switch(c){case"start":s[t]=o,p=h++;break;case"end":delete s[t],--h;case"drag":_=e(n,t),p=h}Q(new $r(l,c,a,t,p,_[0]+u,_[1]+f,_[0]-v[0],_[1]-v[1],d),d.apply,d,[c,r,i])}}return l.filter=function(t){return arguments.length?(i="function"==typeof t?t:Xr(!!t),l):i},l.container=function(t){return arguments.length?(a="function"==typeof t?t:Xr(t),l):a},l.subject=function(t){return arguments.length?(o="function"==typeof t?t:Xr(t),l):o},l.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Xr(!!t),l):u},l.on=function(){var t=c.on.apply(c,arguments);return t===c?l:t},l.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,l):Math.sqrt(f)},l}().on("start.interrupt",(function(){c.interrupt()})).on("start drag",(function(){const t=rh.node().getBoundingClientRect();u=event.x-t.left,T(h.invert(u))}))),c.insert("g",".track-overlay").attr("class","ticks").attr("transform","translate(0,18)").selectAll("text").data(h.ticks(10)).enter().append("text").attr("x",h).attr("y",10).attr("text-anchor","middle").text(t=>t.toLocaleDateString());var f=c.insert("circle",".track-overlay").attr("class","handle").attr("r",9),l=c.append("text").attr("class","label").attr("text-anchor","middle").text(r.toLocaleDateString()).attr("transform","translate(0,-25)"),_=oo().range([0,12]).domain([ah-60,20]),d=oo().domain([r,i]).range([40,ih-40]),p=po().base(Math.E).domain([Math.exp(0),Math.exp(12)]).range([ah-60,10]),v=po().base(Math.E).domain([Math.exp(0),Math.exp(12)]).range([ah-60,10]);const y=rh.append("g").attr("clip-path","url(#cut-off)");var g;function b(t){y.selectAll("*").remove(),o.selectAll("*").remove(),o.selectAll("circle").data(Object.values(t)).enter().append("circle").attr("r",2).attr("fill","#FF0000").attr("transform",t=>{const n=t[t.length-1];return`translate(45, ${v(0===n[a]?1:n[a])})`}),y.selectAll("path").data(Object.values(t)).enter().append("path").attr("class","line").attr("fill","none").attr("stroke","#000").attr("stroke-width",1).attr("d",t=>{return(n=a,Os().x((function(t){return d(t.date)})).y((function(t){return 0===t[n]?p(1):p(t[n])})))(t);var n}),y.selectAll("text").data(Object.values(t)).enter().append("text").attr("alignment-baseline","middle").attr("transform",t=>{const n=t[t.length-1];return`translate(${d(n.date)}, ${p(0===n[a]?1:n[a])})`}).text(t=>t[0].country)}rh.append("g").attr("transform","translate(45, 10)").call((g=p,M(4,g)).ticks(20).tickFormat(mi(".1",1e4)));var x=Er(gr).extent([[15,0],[30,ah-60]]).on("brush",(function(){var t=$.selection;const n=[_(t[0]),_(t[1])];p=po().base(Math.E).domain([Math.exp(n[1]),Math.exp(n[0])]).range([ah-60,10]),b(w)})),m=rh.append("g").attr("class","brush").attr("transform","translate(22,10)").call(x);let w,k;function T(n){k=n,f.attr("cx",h(n)),l.attr("x",h(n)).text(new Date(n).toLocaleDateString()),w=t.filter((function(t){return t.Date=eh(t),t.Date<n})).reduce((t,n)=>{const{Date:e,Country:r,Confirmed:i,Deaths:a}=n;let o=0,u=0;return t[r]?(o=t[r][t[r].length-1].confirmed,u=t[r][t[r].length-1].deaths):t[r]=[],t[r].push({date:e,country:r,confirmed:i,deaths:a,confirmedDiff:i-o,deathsDiff:a-u}),t},{});const e=[];Object.keys(w).forEach(t=>{const n=w[t];let r=!1;for(let t=0;t<n.length;t++)if(n[t][a]>0){r=!0;break}r||e.push(t)}),e.forEach(t=>delete w[t]),b(w)}const N=new Date(r);N.setDate(r.getDate()+25),T(N),m.call(x).call(x.move,[0,ah-60]),Zt("#vis-container").insert("div").attr("class","padded").text("Select plot").insert("select","svg").on("change",(function(){a=Zt(this).property("value"),T(k)})).selectAll("option").data([{name:"Confirmed Cases",value:"confirmed"},{name:"Confirmed Deaths",value:"deaths"}]).enter().append("option").attr("value",t=>t.value).text(t=>t.name)};fetch("https://raw.githubusercontent.com/ascentcore/ascentcore.github.io/master/assets/static/data.json").then(t=>t.json()).then(t=>{oh(t)})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,