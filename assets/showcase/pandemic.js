!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);const n={populationSize:500,workerPercent:.7,commercialAreas:6,socialAreas:5,visitProbability:1e-4,socialProbability:2e-4,mapSize:[30,30],virus:{startManifest:1,manifestUpTo:6,spreadProbability:.01,recoveryTime:4,mortality:.09,reinfectProbability:.001}};function a(e,t,r){const{x:n,y:a,type:i}=t;switch(i){case 0:e.fillStyle="rgba(0,255,0,0.4)";break;case 1:e.fillStyle="rgba(0,0,255,0.4)";break;case 2:e.fillStyle="rgba(240,124,64,0.4)";break;case 3:e.fillStyle="rgba(64,64,64,0.4)";break;case 4:e.fillStyle="rgba(255,64,255,0.4)"}e.fillRect(n*r-r/2,a*r-r/2,r,r),e.strokeStyle="rgba(0,0,0,0.3)",e.strokeRect(n*r-r/2,a*r-r/2,r,r),e.stroke()}function i(){const e=document.createElement("canvas"),t=e.getContext("2d");return e.width=200,e.height=45,t.fillText("Legend",5,8),t.fillText("House",20,21),t.fillText("Work/Commercial",20,38),t.fillText("Hospital",135,21),t.fillText("Social Area",135,38),a(t,{x:1,y:2,type:0},9),a(t,{x:1,y:4,type:1},9),a(t,{x:14,y:2,type:2},9),a(t,{x:14,y:4,type:4},9),e}const o=["speed","slower","faster","stop","setup","virus-setup","simulations","addsimulation","header"].reduce((e,t)=>(e[t]=document.querySelector(`#${t}`),e),{}),l=document.createElement("span");l.style="display: inline-block; width: 200px; font-size: 14px; font-family: monospace;",o.header.appendChild(l),o.header.appendChild(i()),o.stop.onclick=e=>{m=-1===m?1:-1,o.stop.innerHTML=-1!==m?"Pause":"Start"},o.faster.onclick=e=>{m>0&&m--},o.slower.onclick=e=>{m++};const s={startManifest:"Manifestation Start (day)",manifestUpTo:"Manifestation Delay (days)",recoveryTime:"Recovery Time (days)"};function c(e,t,r){t.forEach(t=>{let n=s[t];if(!n){let e=t.replace(/([A-Z])/g," $1");n=e.charAt(0).toUpperCase()+e.slice(1)}const a=`<div class="input-field col s6">\n          <input value="${e[t]}" id="${t}" type="number" min="0">\n          <label class="active" for="${t}">${n}</label>\n        </div>`,i=document.createElement("div");i.innerHTML=a,o[r].appendChild(i),i.querySelector("input").onchange=r=>{const{value:n}=r.target,a=parseFloat(n);e[t]=a}})}const f=Object.assign({},n);c(f,["populationSize","workerPercent","commercialAreas","socialAreas","visitProbability","socialProbability"],"setup"),c(f.virus,["startManifest","manifestUpTo","spreadProbability","recoveryTime","mortality","reinfectProbability"],"virus-setup");const d=[];function u(){const e=function(e){const t=Object.assign({},n,e),{populationSize:r,workerPercent:o,commercialAreas:l,socialAreas:s,virus:c,visitProbability:f,socialProbability:d}=t,{startManifest:u,manifestUpTo:m,spreadProbability:p,mortality:h,recoveryTime:y,reinfectProbability:g}=c,b=Math.max(Math.floor(Math.sqrt(r/2+l+s)),30);t.mapSize=[b,b];const{mapSize:M}=t;let T=0,v=0,x=0,w=!1;const k={infected:new Array(450).fill(0),hospitalized:new Array(450).fill(0),dead:new Array(450).fill(0),days:new Array(450).fill(0)};function S(e,t){k[e].splice(0,1),k[e].push(t)}const P=document.createElement("span");P.style="display: inline-block; padding: 10px; border: 1px solid #000; margin: 5px;";const E=document.createElement("canvas");P.appendChild(E);const A=document.createElement("button");A.innerText="Infect",A.className="waves-effect waves-light btn-small",A.onclick=()=>{const e=U.filter(e=>!e.infected);F(e[Math.floor(Math.random()*e.length)])};const C=document.createElement("div");C.className="sim-control",C.style="margin-top: 10px",C.innerHTML='<label>\n        <input type="checkbox"  />\n        <span>Force Isolation</span>\n    </label>',C.appendChild(A),P.appendChild(C),C.querySelector("input").onchange=e=>{w=e.target.checked},E.setAttribute("width",450),E.setAttribute("height",510);const z=450/M[0],$={},O=[],j=[],H=[],U=[],R=e=>{let t;for(;!t;){const r=1+Math.floor(Math.random()*(M[0]-1)),n=1+Math.floor(Math.random()*(M[1]-1)),a=`${r}-${n}`;$[a]||(t=Object.assign({},e,{x:r,y:n}),$[a]=t)}return t},q=R({type:2});for(let e=0;e<l;e++){const e=R({type:1});j.push(e)}for(let e=0;e<s;e++){const e=R({type:4});H.push(e)}for(let e=0;e<r;e++){const e={},t=O.filter(e=>e.size<4);let r=t[Math.floor(Math.random()*t.length)];(!O.length||Math.random()<.4||!r)&&(r=R({type:0,size:0}),O.push(r)),r.size+=1,Object.assign(e,{location:0,offsetX:0,offsetY:0,x:r.x,y:r.y,currentTarget:r,destination:r,returnTime:1320,assignedHome:r}),U.push(e)}for(let e=0;e<r*o;e++)U[e].destination=j[Math.floor(Math.random()*j.length)],U[e].destinationTime=60*(Math.floor(4*Math.random())+6)+Math.floor(30*Math.random()),U[e].workReturnTime=U[e].returnTime=U[e].destinationTime+480;const I=[...j,...O,...H,q],L=document.createElement("canvas");function _(e,t,n,a){let i,o;e.strokeStyle=n;for(let n=0;n<t.length;n++)o=t[n],i=Math.floor(50*o/r),e.beginPath(),e.moveTo(n,510),e.lineTo(n,510-i),e.stroke();e.beginPath(),e.moveTo(0,510-i),e.lineTo(450,510-i),e.stroke(),e.fillStyle="#000",e.font="10px Lato",e.fillText(`${a}${o}`,0,510-i-2)}function F(e){(!e.wasInfected||Math.random()<g)&&(v++,e.infected=!0,e.timeUntilManifestation=24*(u+Math.floor(Math.random()*m))*60,e.willDie=Math.random()<h,e.recover=24*(y+Math.floor(y*Math.random()*.3))*60)}return L.width=E.width,L.height=E.height,I.forEach(e=>{a(L.getContext("2d"),e,z)}),F(U[0]),{wrapper:P,render:function(e){const t=E.getContext("2d");t.clearRect(0,0,450,510),t.drawImage(L,0,0);const r=z/6,n=z/6;U.forEach(e=>{const{x:a,y:i,infected:o,dead:l,timeUntilManifestation:s}=e;if(!l){t.fillStyle=o?"rgb(255,0,0)":"rgba(25,25,25,1)";const l=a*z-r+e.offsetX,s=i*z-n+e.offsetY;t.beginPath();const c=o?-2:-1,f=o?-4:-2;t.fillRect(l-c,s-c,f,f),t.stroke()}}),_(t,k.infected,"rgba(255,125,40, 0.3)","Infected: "),_(t,k.hospitalized,"rgba(255,0,0, 0.3)","Hospitalised: "),_(t,k.dead,"rgba(0,0,0, 0.3)","Fatalities: "),_(t,k.days,"rgba(0,0,0, 0.5)","")},tick:function(e){U.forEach(t=>{const{currentTarget:r,destination:n,destinationTime:a,returnTime:i,assignedHome:o}=t;if(!t.dead){if(t.currentTarget!=q&&!w)if(a===e)n&&t.currentTarget===o&&a===e&&(t.currentTarget=n);else if(t.currentTarget!==o&&i===e)t.currentTarget=o;else if(!t.social&&t.currentTarget===o){if(Math.random()<f){const r=O[Math.floor(O.length*Math.random())];r!=o&&(t.social=!0,t.returnTime=e+60*Math.floor(3*Math.random()),t.currentTarget=r)}else if(Math.random()<d){t.social=!0;const r=H[Math.floor(H.length*Math.random())];t.returnTime=e+10*Math.floor(30*Math.random()),t.currentTarget=r}t.returnTime>1438&&(t.returnTime=1438)}if(t.infected){if(t.timeUntilManifestation>0&&(t.timeUntilManifestation--,Math.random()<p)){const e=U.filter(e=>{if(e==t||e.infected)return!1;const r=(t.x-e.x)*(t.x-e.x),n=(t.y-e.y)*(t.y-e.y);return Math.sqrt(r+n)<2});e&&e.length&&e.forEach(e=>{Math.random()<p&&F(e)})}0==t.timeUntilManifestation&&(t.timeUntilManifestation=-1,t.willDie?(t.dead=!0,T++):(t.currentTarget=q,x++)),t.currentTarget===q&&t.recover--,0==t.recover&&(t.infected=!1,t.wasInfected=!0,v--,x--,t.currentTarget=t.assignedHome)}t.x+=Math.sign(t.currentTarget.x-t.x),t.y+=Math.sign(t.currentTarget.y-t.y),Math.random()<.1&&(t.offsetX=Math.floor(Math.random()*z/2)-1),Math.random()<.1&&(t.offsetY=Math.floor(Math.random()*z/2)-1)}}),e%60==0&&(S("infected",v),S("dead",T),S("hospitalized",x),S("days",0===e?r:0))},day:function(){U.forEach(e=>{e.social=!1,e.currentTarget!==q&&(e.currentTarget=e.assignedHome,e.returnTime=e.workReturnTime)})},getLegend:i}}(f);o.simulations.appendChild(e.wrapper);const t=e.wrapper.querySelector(".sim-control"),r=document.createElement("button");r.className="waves-effect waves-light btn-small red",r.innerText="Remove",r.style="float: right;",r.onclick=()=>{const t=d.indexOf(e);d.splice(t,1),o.simulations.removeChild(e.wrapper)},t.appendChild(r),d.push(e)}u(),o.addsimulation.onclick=e=>u();let m=1,p=m,h=240;window.setInterval(()=>{if(p--,p<1&&-1!==m){p=m,d.forEach(e=>e.tick(h)),h++>1440&&(h=0,d.forEach(e=>e.day()));const e=Math.floor(h/60),t=e>7&&e<19?"☀️":"🌙";l.innerHTML=`Time of day ${t}: ${(""+e).padStart(2,"0")}:${(""+Math.floor(h%60)).padStart(2,"0")}`}},1),function e(){window.requestAnimationFrame(()=>{d.forEach(e=>e.render()),e()})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,