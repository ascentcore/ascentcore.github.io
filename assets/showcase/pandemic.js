!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r={populationSize:500,workerPercent:.7,commercialAreas:6,socialAreas:5,visitProbability:1e-4,socialProbability:2e-4,mapSize:[30,30],virus:{startManifest:2,manifestUpTo:6,spreadProbability:.04,recoveryTime:4,mortality:.09,reinfectProbability:.001}};function a(e,t,n){const{x:r,y:a,type:i}=t;switch(i){case 0:e.fillStyle="rgba(0,255,0,0.4)";break;case 1:e.fillStyle="rgba(0,0,255,0.4)";break;case 2:e.fillStyle="rgba(240,124,64,0.4)";break;case 3:e.fillStyle="rgba(64,64,64,0.4)";break;case 4:e.fillStyle="rgba(255,64,255,0.4)"}e.fillRect(r*n-n/2,a*n-n/2,n,n),e.strokeStyle="rgba(0,0,0,0.3)",e.strokeRect(r*n-n/2,a*n-n/2,n,n),e.stroke()}function i(e){const t=Object.assign({},r,e),{populationSize:n,workerPercent:i,commercialAreas:l,socialAreas:s,virus:c,visitProbability:f,socialProbability:d}=t,{startManifest:u,manifestUpTo:p,spreadProbability:m,mortality:h,recoveryTime:y,reinfectProbability:b}=c,g=Math.floor(Math.sqrt(n))+l+s;t.mapSize=[g,g];const{mapSize:M}=t;let T=0,v=0,x=0,S=!1;const k={infected:new Array(300).fill(0),hospitalized:new Array(300).fill(0),dead:new Array(300).fill(0)};function w(e,t){k[e].splice(0,1),k[e].push(t)}const P=document.createElement("span");P.style="display: inline-block; padding: 10px; border: 1px solid #000; margin: 5px;";const E=document.createElement("canvas");P.appendChild(E);const A=document.createElement("button");A.innerText="Infect",A.className="waves-effect waves-light btn-small",A.onclick=()=>{const e=H.filter(e=>!e.infected);_(e[Math.floor(Math.random()*e.length)])};const C=document.createElement("div");C.className="sim-control",C.style="margin-top: 10px",C.innerHTML='<label>\n        <input type="checkbox"  />\n        <span>Force Isolation</span>\n    </label>',C.appendChild(A),P.appendChild(C),C.querySelector("input").onchange=e=>{S=e.target.checked},E.setAttribute("width",300),E.setAttribute("height",360);const z=300/M[0],$={},O=[],j=[],U=[],H=[],q=e=>{let t;for(;!t;){const n=1+Math.floor(Math.random()*(M[0]-1)),r=1+Math.floor(Math.random()*(M[1]-1)),a=`${n}-${r}`;$[a]||(t=Object.assign({},e,{x:n,y:r}),$[a]=t)}return t},L=q({type:2});for(let e=0;e<l;e++){const e=q({type:1});j.push(e)}for(let e=0;e<s;e++){const e=q({type:4});U.push(e)}for(let e=0;e<n;e++){const e={},t=O.filter(e=>e.size<4);let n=t[Math.floor(Math.random()*t.length)];(!O.length||Math.random()<.4||!n)&&(n=q({type:0,size:0}),O.push(n)),n.size+=1,Object.assign(e,{location:0,x:n.x,y:n.y,currentTarget:n,destination:n,returnTime:1320,assignedHome:n}),H.push(e)}for(let e=0;e<n*i;e++)H[e].destination=j[Math.floor(Math.random()*j.length-1)],H[e].destinationTime=60*(Math.floor(4*Math.random())+6)+Math.floor(30*Math.random()),H[e].returnTime=H[e].destinationTime+480;const I=[...j,...O,...U,L];function R(e,t,r,a){let i,o;e.strokeStyle=r;for(let r=0;r<t.length;r++)o=t[r],i=Math.floor(50*o/n),e.beginPath(),e.moveTo(r,360),e.lineTo(r,360-i),e.stroke();e.beginPath(),e.moveTo(0,360-i),e.lineTo(300,360-i),e.stroke(),e.fillStyle="#000",e.font="10px Lato",e.fillText(`${a}${o}`,0,360-i-2)}function _(e){(!e.wasInfected||Math.random()<b)&&(v++,e.infected=!0,e.timeUntilManifestation=u+24*Math.floor(Math.random()*(p-u))*60,e.willDie=Math.random()<h,e.recover=24*(y+Math.floor(y*Math.random()*.3))*60)}return _(H[0]),{wrapper:P,tick:function(e){H.forEach(t=>{const{currentTarget:n,destination:r,destinationTime:a,returnTime:i,assignedHome:o}=t;if(!t.dead){if(t.currentTarget!=L&&!S)if(r&&a===e&&n==o)t.currentTarget=r;else if(i===e&&n!=o)t.currentTarget=o;else if(!t.social){if(Math.random()<f){const n=O[Math.floor(O.length*Math.random())];t.social=!0,n!=o&&(t.returnTime=e+60*Math.floor(3*Math.random()),t.currentTarget=n)}else if(Math.random()<d){t.social=!0;const n=U[Math.floor(U.length*Math.random())];t.returnTime=e+10*Math.floor(30*Math.random()),t.currentTarget=n}t.returnTime>1438&&(t.returnTime=1438)}if(t.infected){if(t.timeUntilManifestation>0&&(t.timeUntilManifestation--,Math.random()<m)){const e=H.filter(e=>{if(e==t||e.infected)return!1;const n=(t.x-e.x)*(t.x-e.x),r=(t.y-e.y)*(t.y-e.y);return Math.sqrt(n+r)<2});e&&e.length&&e.forEach(e=>{Math.random()<m&&_(e)})}0==t.timeUntilManifestation&&(t.timeUntilManifestation=-1,t.willDie?(t.dead=!0,T++):(t.currentTarget=L,x++)),t.currentTarget===L&&t.recover--,0==t.recover&&(t.infected=!1,t.wasInfected=!0,v--,x--,t.currentTarget=t.assignedHome)}t.x+=Math.sign(t.currentTarget.x-t.x),t.y+=Math.sign(t.currentTarget.y-t.y)}}),e%60==0&&(w("infected",v),w("dead",T),w("hospitalized",x)),function(e){const t=E.getContext("2d");t.clearRect(0,0,300,360),I.forEach(e=>{a(t,e,z)});const n=z/6,r=z/6;H.forEach(e=>{const{x:a,y:i,infected:o,dead:l,timeUntilManifestation:s}=e;if(!l){t.fillStyle="rgba(25,25,25,1)",o&&(t.fillStyle="rgb(255,0,0)");const e=a*z-n+Math.floor(Math.random()*n*2),l=i*z-r+Math.floor(Math.random()*n*2);t.beginPath(),t.fillRect(e,l,3,3),t.stroke(),o&&(t.strokeStyle=s<0?"rgb(255,0,0,1)":"rgb(240, 121, 17)",t.beginPath(),t.strokeWidth=2,t.arc(e,l,4,0,2*Math.PI),t.stroke())}}),R(t,k.infected,"rgba(255,125,40, 0.3)","Infected: "),R(t,k.hospitalized,"rgba(255,0,0, 0.3)","Confirmed Cases: "),R(t,k.dead,"rgba(0,0,0, 0.3)","Fatalities: ")}()},day:function(){H.forEach(e=>e.social=!1)},getLegend:o}}function o(){const e=document.createElement("canvas"),t=e.getContext("2d");return e.width=200,e.height=45,t.fillText("Legend",5,8),t.fillText("House",20,21),t.fillText("Work/Commercial",20,38),t.fillText("Hospital",135,21),t.fillText("Social Area",135,38),a(t,{x:1,y:2,type:0},9),a(t,{x:1,y:4,type:1},9),a(t,{x:14,y:2,type:2},9),a(t,{x:14,y:4,type:4},9),e}const l=["speed","slower","faster","stop","setup","virus-setup","simulations","addsimulation","header"].reduce((e,t)=>(e[t]=document.querySelector(`#${t}`),e),{}),s=document.createElement("span");s.style="display: inline-block; width: 200px; font-size: 14px; font-family: monospace;",l.header.appendChild(s),l.header.appendChild(o()),l.stop.onclick=e=>{m=-1===m?1:-1,l.stop.innerHTML=-1!==m?"Pause":"Start"},l.faster.onclick=e=>{m>0&&m--},l.slower.onclick=e=>{m++};const c={startManifest:"Manifestation Start (day)",manifestUpTo:"Manifestation Delay (days)",recoveryTime:"Recovery Time (days)"};function f(e,t,n){t.forEach(t=>{let r=c[t];if(!r){let e=t.replace(/([A-Z])/g," $1");r=e.charAt(0).toUpperCase()+e.slice(1)}const a=`<div class="input-field col s6">\n          <input value="${e[t]}" id="${t}" type="number" min="0">\n          <label class="active" for="${t}">${r}</label>\n        </div>`,i=document.createElement("div");i.innerHTML=a,l[n].appendChild(i),i.querySelector("input").onchange=n=>{const{value:r}=n.target,a=parseFloat(r);e[t]=a}})}const d=Object.assign({},r);f(d,["populationSize","workerPercent","commercialAreas","socialAreas","visitProbability","socialProbability"],"setup"),f(d.virus,["startManifest","manifestUpTo","spreadProbability","recoveryTime","mortality","reinfectProbability"],"virus-setup");const u=[];function p(){const e=i(d);l.simulations.appendChild(e.wrapper);const t=e.wrapper.querySelector(".sim-control"),n=document.createElement("button");n.className="waves-effect waves-light btn-small red",n.innerText="Remove",n.onclick=()=>{const t=u.indexOf(e);u.splice(t,1),l.simulations.removeChild(e.wrapper)},t.appendChild(n),u.push(e)}p(),l.addsimulation.onclick=e=>p();let m=2,h=m,y=480;!function e(){window.requestAnimationFrame(()=>{if(h--,h<1&&-1!==m){h=m,u.forEach(e=>e.tick(y)),y++,y++>1440&&(y=0,u.forEach(e=>e.day()));const e=Math.floor(y/60),t=e>7&&e<19?"☀️":"🌙";s.innerHTML=`Time of day ${t}: ${(""+e).padStart(2,"0")}:${(""+Math.floor(y%60)).padStart(2,"0")}`}e()})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,